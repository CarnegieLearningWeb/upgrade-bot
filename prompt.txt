You are a software engineer with expertise in the Angular framework. Your mission is to offer design and development support for UpGrade, a software dedicated to A/B testing and feature flagging within the education sector.

Adhere strictly to facts and provide truthful responses based on the given context. Ensure all code suggestions or examples align with best practices as outlined in the official Angular documentation, specifically focusing on the use of Material Design Components (MDC).

In situations where the query falls outside your area of knowledge, either state that you do not have the necessary information or request further clarification to provide the most accurate support possible.

Context includes:
- "design": detailed JSON structure outlining the design requirements and specifications for UpGrade.
- "reference": documentation and examples related to Angular MDC, serving as a guideline for implementing Material Design in an Angular project.

Please utilize this context to inform your responses and ensure they are relevant and helpful to the task at hand.

Context:
{'design': {'misc': {'FileUploader.json': '{"type":"file uploader","styles":"FileUploaderStyle","class":"file-uploader","notes":"File(s) can be dragged and dropped into the whole section. After the file upload, it either returns to Value field (when altered), or transitions to ImportFileTable (when used in Import modal)","elements":[{"type":"basic icon","class":"upload-icon","text":"file_upload"},{"type":"instruction","class":"instruction","text":"Drag and drop or"},{"type":"flat primary button","text":"Choose {fileType (e.g., CSV or JSON)}","notes":"Opens the file selection dialog on click"},{"type":"basic icon button","class":"close-button","text":"close","notes":"Displayed only when FileUploader alters Values field. Returns to Values field on click"}]}', 'StatusIndicator.json': '{"type":"status indicator","styles":"StatusIndicatorStyle","class":"status-indicator","notes":"{status} indicates the status text (e.g., Enabled)","elements":[{"type":"status label","class":"status-label","text":"{status}"}]}', 'Sidenav.json': '{"type":"sidenav","styles":"SidenavStyle","class":"sidenav","elements":[{"type":"header","class":"header","elements":[{"type":"h1","class":"heading","text":"UpGrade"},{"type":"subheading","class":"subheading","text":"Version: v6.1.0"}]},{"type":"content","class":"content","notes":"list-item classes should update to {className}-selected when selected","elements":[{"type":"list item","class":"list-item","elements":[{"type":"basic icon","class":"icon","text":"toggle_on"},{"type":"text","class":"text","text":"Feature Flags"}]},{"type":"list item","class":"list-item","elements":[{"type":"basic icon","class":"icon","text":"group"},{"type":"text","class":"text","text":"Segments"}]}]}]}'}, 'tables': {'SegmentListsTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Type","Values","Actions"]},{"type":"body rows","class":"body-row","cell types":["string","string","{Number of Values} Values (e.g., 5 Values)","edit and delete icons"],"notes":"The row is dynamically filled with values from AddSegmentListModal. When the table is empty, the class should update to \'empty-row\', and a message \'No lists defined for this segment. Add a new list.\' in the center of the row will be displayed. Clicking the edit icon opens EditSegmentListModal, Clicking the delete icon opens DeleteSegmentListModal"}]}', 'FeatureFlagExcludeListsTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Type","Values","Actions"]},{"type":"body rows","class":"body-row","cell types":["string","string","{Number of Values} Values (e.g., 5 Values)","edit and delete icons"],"notes":"The row is dynamically filled with values from AddFeatureFlagExcludeListModal. When the table is empty, the class should update to \'empty-row\', and a message \'No exclude lists defined. No participants will be excluded from the included lists.\' in the center of the row will be displayed. Clicking the edit icon opens EditFeatureFlagExcludeListModal, Clicking the delete icon opens DeleteFeatureFlagExcludeListModal"}]}', 'SegmentUsedByTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Type","Status","Updated at"]},{"type":"body rows","class":"body-row","cell types":["hyperlink text","\'Feature Flag\'","StatusIndicator (Disabled, Enabled, or Archived)","string (e.g., Feb 5, 2024, 10:05 AM)"],"notes":"When the table is empty, the class should update to \'empty-row\', and a message \'This segment is currently not being used by any experiments or feature flags.\' in the center of the row will be displayed"}]}', 'FeatureFlagsRootTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Status","Updated at","App Context","Tags","Exposures"]},{"type":"body rows","class":"body-row","cell types":["hyperlink text","StatusIndicator (Disabled, Enabled, or Archived)","string (e.g., Feb 5, 2024, 10:05 AM)","string","chips","{Number of exposures} Students (e.g., 47 Students)"],"notes":"The row is dynamically filled with values from AddFeatureFlagModal. When the table is empty, the class should update to \'empty-row\', and a message \'No feature flags defined. Create a new feature flag.\' in the center of the row will be displayed. Clicking the name links to FeatureFlagDetailsPage"}]}', 'ViewLogsTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Date/Time","Author","Message"]},{"type":"body rows","class":"body-row","cell types":["string (e.g., Feb 5, 2024, 10:05 AM)","string","string"],"notes":"All changes made to the instance will be shown in the table. Most recent log should be displayed at the top"}]}', 'SegmentsRootTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Status","Updated at","App Context","Tags","Lists"]},{"type":"body rows","class":"body-row","cell types":["hyperlink text","StatusIndicator (Global, Unused, or Used)","string (e.g., Feb 5, 2024, 10:05 AM)","string","chips","{Number of lists} Lists (e.g., 2 Lists)"],"notes":"The row is dynamically filled with values from AddSegmentModal. There should always be a default row named \'Global Exclude\' with the status \'Global\' and the app context \'ALL\'. Clicking the name links to SegmentDetailsPage"}]}', 'FeatureFlagExposuresTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":[],"notes":"headings are changed dynamically depending on Time selection. If \'Last 7 Days\' is selected, the headings will be 7 dates (e.g., 03/13, 03/14..) including today. Otherwise, the headings will be N months (e.g., Jan, Feb..) including this month. The last heading \'Total\' should be appended"},{"type":"body row","class":"body-row","cell types":"Number of exposures on each date or month, and the total number","notes":"The total number should be the sum of all numbers in the previous cells"}]}', 'FeatureFlagIncludeListsTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["Name","Type","Values","Enable","Actions"]},{"type":"body rows","class":"body-row","cell types":["string","string","{Number of Values} Values (e.g., 5 Values)","slide toggle","edit and delete icons"],"notes":"The row is dynamically filled with values from AddFeatureFlagIncludeListModal. When the table is empty, the class should update to \'empty-row\', and a message \'No include lists defined. The feature flag will not be applied to any participants.\' in the center of the row will be displayed. The slide toggle will be disabled (view only) if the Feature Flag status is \'Disabled\', enabled (editable) otherwise. Clicking the edit icon opens EditFeatureFlagIncludeListModal, Clicking the delete icon opens DeleteFeatureFlagIncludeListModal"}]}', 'ImportFileTable.json': '{"type":"table","styles":"TableStyle","class":"table","elements":[{"type":"header row","class":"header-row","headings":["File Name","Compatibility"]},{"type":"body rows","class":"body-row","cell types":["string","StatusIndicator (Compatible, Warning, or Incompatible)"],"notes":"Each row will have \'chevron_right\' icon on the left side. If the status is \'Compatible\', the icon will be greyed out (opacity: 0.35). Otherwise, the row will be expanded/collapsed on click. When expanded, the icon will be changed to \'expand_more\', and area with a message will be shown below the row. Warning message: \'This JSON file can be imported, but it may contain outdated or missing properties/features. Please review the details post-import.\', Incompatible message: \'This JSON file cannot be imported because it lacks required properties or is incorrectly formatted. Please ensure it is the correct file.\'"}]}'}, 'forms': {'ImportFileForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"FileUploader","notes":"Expects one or more JSON files. Transitions to ImportFileTable after the file upload"}]}', 'SegmentListForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"input","label":"Name","placeholder":"e.g., My schools","required":true,"hint":"The name for this list."},{"type":"input","label":"Description (optional)","placeholder":"Describe your list","required":false},{"type":"select","label":"Type","required":true,"options":["Individual","Segment"],"notes":"The options are dynamically populated with the values from listTypes: string[]"},{"type":"input","label":"Values","placeholder":"Values separated by commas","required":true,"notes":"This looks like text input, allows entering comma-separated values that are converted to chips. When \'Segment\' Type is selected, the field works like a combo box allowing selecting a segment from options found from segments: string[]. In the right side of the field, \'Upload\' icon button is displayed if the field is empty, otherwise, \'Download\' icon button is displayed. When \'Upload\' is clicked, the field changes to FileUploader, and changes back to Values field after CSV upload. when \'Download\' is clicked, it downloads a CSV file of one column of values with no headers"}]}', 'ExportFileForm.json': '{"type":"form","styles":"FormStyle","class":"form-compact","elements":[{"type":"group label","class":"group-label","text":"Export Type"},{"type":"radio group","notes":"Option texts differ depending on modal type","elements":[{"type":"radio button","text":"{exportOption1}"},{"type":"radio button","text":"{exportOption2}"}]}]}', 'FeatureFlagIncludeListForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"input","label":"Name","placeholder":"e.g., My schools","required":true,"hint":"The name for this include list."},{"type":"input","label":"Description (optional)","placeholder":"Describe your include list","required":false},{"type":"select","label":"Type","required":true,"options":["All","Individual","Segment"],"notes":"The options are dynamically populated with the values from listTypes: string[]"},{"type":"input","label":"Values","placeholder":"Values separated by commas","required":true,"notes":"This looks like text input, allows entering comma-separated values that are converted to chips. The field is displayed by default and is hidden when \'All\' Type is selected. The \'All\' Type is only shown when adding a first include list. When \'Segment\' Type is selected, the field works like a combo box allowing selecting a segment from options found from segments: string[]. In the right side of the field, \'Upload\' icon button is displayed if the field is empty, otherwise, \'Download\' icon button is displayed. When \'Upload\' is clicked, the field changes to FileUploader, and changes back to Values field after CSV upload. when \'Download\' is clicked, it downloads a CSV file of one column of values with no headers"},{"type":"slide toggle","label":"Enable by default","default":false}]}', 'DeleteConfirmationForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"message","class":"message","text":"Are you sure you want to delete \\"{targetName}\\"?"},{"type":"message","class":"message","text":"Type \\"delete\\" to confirm deletion:"},{"type":"input","placeholder":"Type delete","required":true,"notes":"Requires typing \'delete\' in the field to be valid"}]}', 'FeatureFlagForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"input","label":"Name","placeholder":"e.g., My feature flag","required":true,"hint":"The name for this feature flag."},{"type":"input","label":"Key","placeholder":"Key for this feature flag","required":true,"hint":"A unique key used to retrieve this feature flag from the client application. Learn more","notes":"Autocompleted in all caps and underscores as the \'Name\' field gets typed. \'Learn more\' links to https://www.upgradeplatform.org/"},{"type":"input","label":"Description (optional)","placeholder":"Describe your feature flag","required":false},{"type":"select","label":"App Context","placeholder":"App Context for this feature flag","required":true,"options":[],"hint":"The App Context indicates where the experiment will run, known to UpGrade. Learn more","notes":"The options are dynamically populated with the values from appContexts: string[]. \'Learn more\' links to https://www.upgradeplatform.org/"},{"type":"input","label":"Tags (optional)","placeholder":"Tags separated by commas","required":false,"notes":"This looks like text input, allows entering comma-separated tags that are converted to chips"}]}', 'FeatureFlagExcludeListForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"input","label":"Name","placeholder":"e.g., My schools","required":true,"hint":"The name for this exclude list."},{"type":"input","label":"Description (optional)","placeholder":"Describe your exclude list","required":false},{"type":"select","label":"Type","required":true,"options":["Individual","Segment"],"notes":"The options are dynamically populated with the values from listTypes: string[]"},{"type":"input","label":"Values","placeholder":"Values separated by commas","required":true,"notes":"This looks like text input, allows entering comma-separated values that are converted to chips. When \'Segment\' Type is selected, the field works like a combo box allowing selecting a segment from options found from segments: string[]. In the right side of the field, \'Upload\' icon button is displayed if the field is empty, otherwise, \'Download\' icon button is displayed. When \'Upload\' is clicked, the field changes to FileUploader, and changes back to Values field after CSV upload. When \'Download\' is clicked, it downloads a CSV file of one column of values with no headers"}]}', 'SegmentForm.json': '{"type":"form","styles":"FormStyle","class":"form-standard","elements":[{"type":"input","label":"Name","placeholder":"e.g., My segment","required":true,"hint":"The name for this segment."},{"type":"input","label":"Description (optional)","placeholder":"Describe your segment","required":false},{"type":"select","label":"App Context","placeholder":"App Context for this segment","required":true,"options":[],"hint":"The App Context indicates where the experiment will run, known to UpGrade. Learn more","notes":"The options are dynamically populated with the values from appContexts: string[]. \'Learn more\' links to https://www.upgradeplatform.org/"},{"type":"input","label":"Tags (optional)","placeholder":"Tags separated by commas","required":false,"notes":"This looks like text input, allows entering comma-separated tags that are converted to chips"}]}'}, 'cards': {'SegmentsRootCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"filter-container","elements":[{"type":"select","options":["All","Name","Status","App Context","Tag"],"default":"All","notes":"Determines the target filter to search from the table"},{"type":"input","placeholder":"Search","notes":"In the right side of the field, \'Search\' icon is displayed. Searches the input text from the table based on the target filter. Only the searched rows will be visible in the table"}]},{"type":"container","class":"button-container","elements":[{"type":"flat primary button","text":"Add Segment","notes":"Opens AddSegmentModal on click"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Import Segment\', \'Export All Segments\' on click. Opens the selected option\'s modal on click"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"SegmentsRootTable"}]}]}', 'FeatureFlagIncludeListsCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"Include Lists ({numRows})"}]},{"type":"instruction","class":"instruction","text":"Define include lists for this feature flag."}]},{"type":"container","class":"button-container","elements":[{"type":"flat primary button","text":"Add Include List","notes":"Opens AddFeatureFlagIncludeListModal on click. The button is disabled when a row with \'All\' type exists"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Import List\', \'Export All Lists\', \'Save as a Segment\' on click. Opens the selected option\'s modal on click. The \'Import List\' option is disabled when a row with \'All\' type exists"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"FeatureFlagIncludeListsTable"}]}]}', 'FeatureFlagOverviewCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"{featureFlagName}"},{"type":"StatusIndicator","supported_statuses":["Disabled","Enabled"],"default":"Disabled"}]},{"type":"info","class":"info","text":"Created on: {date (e.g., Feb 5, 2024)} | Updated at: {date/time (e.g., Feb 5, 2024, 10:05 AM)}. View logs","notes":"When the feature flag is created, the label will be \'Created at: {date/time}.\' and after any updates it will be shown in full format including the View Logs. \'View Logs\' part in the text is hyperlink that opens ViewLogsModal"}]},{"type":"container","class":"button-container","elements":[{"type":"slide toggle","text":"Enable","notes":"Opens EnableFeatureFlagModal or DisableFeatureFlagModal on click"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Edit Feature Flag\', \'Export Feature Flag\', \'Duplicate Feature Flag\', \'Archive Feature Flag\', \'Delete Feature Flag\' on click. Opens the selected option\'s modal on click. The \'Delete Feature Flag\' option is disabled when the status is \'Enabled\'"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section of all other cards in FeatureFlagDetailsPage on click, the icon changes to \'expand_more\' that expands the content section of all other cards in FeatureFlagDetailsPage on click"}]}]},{"type":"content","class":"list-content","elements":[{"type":"list","elements":[{"type":"list item","class":"list-item","text":"Key: {key}"},{"type":"list item","class":"list-item","text":"Description: {description}"},{"type":"list item","class":"list-item","text":"App Context: {appContext}"},{"type":"list item","class":"list-item","tags":"{tagChips}"}]}]},{"type":"footer","class":"footer","elements":[{"type":"tab group","default":"Participants","notes":"When \'Participants\' tab is selected, FeatureFlagIncludeListsCard and FeatureFlagExcludeListsCard are displayed below this card. When \'Data\' tab is selected, FeatureFlagExposuresCard is displayed below this card","elements":[{"type":"tab","text":"Participants"},{"type":"tab","text":"Data"}]}]}]}', 'SegmentListsCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"Lists ({numRows})"}]},{"type":"instruction","class":"instruction","text":"Define lists for this segment."}]},{"type":"container","class":"button-container","elements":[{"type":"flat primary button","text":"Add List","notes":"Opens AddSegmentListModal on click"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Import List\', \'Export All Lists\' on click. Opens the selected option\'s modal on click"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"SegmentListsTable"}]}]}', 'FeatureFlagsRootCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"filter-container","elements":[{"type":"select","options":["All","Name","Status","App Context","Tag"],"default":"All","notes":"Determines the target filter to search from the table"},{"type":"input","placeholder":"Search","notes":"In the right side of the field, \'Search\' icon is displayed. Searches the input text from the table based on the target filter. Only the searched rows will be visible in the table"}]},{"type":"container","class":"button-container","elements":[{"type":"flat primary button","text":"Add Feature Flag","notes":"Opens AddFeatureFlagModal on click"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Import Feature Flag\', \'Export All Feature Flags\' on click. Opens the selected option\'s modal on click"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"FeatureFlagsRootTable"}]}]}', 'FeatureFlagExcludeListsCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"Exclude Lists ({numRows})"}]},{"type":"instruction","class":"instruction","text":"Define exclude lists for this feature flag."}]},{"type":"container","class":"button-container","elements":[{"type":"flat primary button","text":"Add Exclude List","notes":"Opens AddFeatureFlagExcludeListModal on click"},{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Import List\', \'Export All Lists\', \'Save as a Segment\' on click. Opens the selected option\'s modal on click"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"FeatureFlagExcludeListsTable"}]}]}', 'SegmentOverviewCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"{segmentName}"},{"type":"StatusIndicator","supported_statuses":["Global","Unused","Used"],"default":"Unused"}]},{"type":"info","class":"info","text":"Created on: {date (e.g., Feb 5, 2024)} | Updated at: {date/time (e.g., Feb 5, 2024, 10:05 AM)}. View logs","notes":"When the segment is created, the label will be \'Created at: {date/time}.\' and after any updates it will be shown in full format including the View Logs. \'View Logs\' part in the text is hyperlink that opens ViewLogsModal"}]},{"type":"container","class":"button-container","elements":[{"type":"basic icon button","text":"more_vert","notes":"Opens a menu with options \'Edit Segment\', \'Export Segment\', \'Duplicate Segment\', \'Delete Segment\' on click. Opens the selected option\'s modal on click. The \'Delete Segment\' option is disabled when the status is \'Used\'. If the segment is \'Global Exclude\', the \'Duplicate Segment\', \'Delete Segment\' options are disabled"},{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section of all other cards in SegmentDetailsPage on click, the icon changes to \'expand_more\' that expands the content section of all other cards in SegmentDetailsPage on click"}]}]},{"type":"content","class":"list-content","elements":[{"type":"list","elements":[{"type":"list item","class":"list-item","text":"Description: {description}"},{"type":"list item","class":"list-item","text":"App Context: {appContext}"},{"type":"list item","class":"list-item","tags":"{tagChips}"}]}]},{"type":"footer","class":"footer","elements":[{"type":"tab group","default":"Lists","notes":"When \'Lists\' tab is selected, SegmentListsCard is displayed below this card. When \'Used By\' tab is selected, SegmentUsedByCard is displayed below this card","elements":[{"type":"tab","text":"Lists"},{"type":"tab","text":"Used By"}]}]}]}', 'FeatureFlagExposuresCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"Exposures"}]},{"type":"instruction","class":"instruction","text":"View total exposures for the feature flag during the specific period."}]},{"type":"container","class":"button-container","elements":[{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"select","label":"Time","options":["Last 7 days","Last 3 Months","Last 6 Months","Last 12 Months"],"default":"Last 7 days"},{"type":"FeatureFlagExposuresTable"}]}]}', 'SegmentUsedByCard.json': '{"type":"card","styles":"CardStyle","class":"card","elements":[{"type":"header","class":"header","elements":[{"type":"container","class":"title-container","elements":[{"type":"container","class":"heading-container","elements":[{"type":"h3","class":"heading","text":"Used By ({numRows})"}]},{"type":"instruction","class":"instruction","text":"View the list of experiments and feature flags that currently use this segment."}]},{"type":"container","class":"button-container","elements":[{"type":"basic icon button","text":"expand_less","notes":"Collapses the content section on click, the icon changes to \'expand_more\' that expands the content section on click"}]}]},{"type":"content","class":"table-content","elements":[{"type":"SegmentUsedByTable"}]}]}'}, 'modals': {'EditFeatureFlagIncludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Edit Include List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagIncludeListForm","notes":"Form should be filled with current values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Save","notes":"Enabled when the form is valid and dirty. Closes modal on click. Edits a row in FeatureFlagIncludeListsTable"}]}]}', 'EditSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Edit Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentForm","notes":"Form should be filled with current values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Save","notes":"Enabled when the form is valid and dirty. Closes modal on click. Edits a row in SegmentsRootTable"}]}]}', 'DisableFeatureFlagIncludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Disable Include List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to disable \\"{includeListName}\\"?"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Disable","notes":"Closes modal on click. Disables the include list in FeatureFlagIncludeListsTable"}]}]}', 'ViewLogsModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-large","notes":"Clicking outside closes the modal","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"View Logs"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ViewLogsTable"}]}]}', 'AddFeatureFlagIncludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Add Include List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagIncludeListForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to FeatureFlagIncludeListsTable"}]}]}', 'ArchiveFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Archive Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to archive \\"{featureFlagName}\\"?"},{"type":"subtext","class":"subtext-red","text":"* Archiving the feature flag will disable the feature flag."},{"type":"subtext","class":"subtext-grey","text":"The archived feature flags are hidden from the feature flag list and can be found by explicitly searching for \\"Archived\\" feature flags."}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Archive","notes":"Closes modal on click. Archives the feature flag. Redirects to FeatureFlagsRootPage"}]}]}', 'ImportSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Import Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ImportFileForm","notes":"Transitions to ImportFileTable after the file upload"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Import","notes":"Enabled when at least one Compatible or Warning file is uploaded. Closes modal on click. Adds row(s) to SegmentsRootTable"}]}]}', 'DeleteSegmentListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Delete List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to delete \\"{listName}\\"?"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Delete","notes":"Closes modal on click. Deletes a row from SegmentListsTable"}]}]}', 'ExportFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Export Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ExportFileForm","notes":"exportOption1: \'Download Feature Flag Design (JSON)\', exportOption2: \'Email Feature Flag Data (CSV)\'"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Export","notes":"Enabled when an option is selected. Closes modal on click"}]}]}', 'EditFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Edit Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagForm","notes":"Form should be filled with current values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Save","notes":"Enabled when the form is valid and dirty. Closes modal on click. Edits a row in FeatureFlagsRootTable"}]}]}', 'DeleteFeatureFlagIncludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Delete Include List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to delete \\"{includeListName}\\"?"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Delete","notes":"Closes modal on click. Deletes a row from FeatureFlagIncludeListsTable"}]}]}', 'EnableFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Enable Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to enable \\"{featureFlagName}\\"?"},{"type":"subtext","class":"subtext-blue","text":"* Only the enabled include lists will be affected."}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Enable","notes":"Closes modal on click. Enables the feature flag on FeatureFlagDetailsPage"}]}]}', 'DeleteFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Delete Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"DeleteConfirmationForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Delete","notes":"Enabled when the form is valid. Closes modal on click. Deletes a row from FeatureFlagsRootTable"}]}]}', 'EditSegmentListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Edit List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentListForm","notes":"Form should be filled with current values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Save","notes":"Enabled when the form is valid and dirty. Closes modal on click. Edits a row in SegmentListsTable"}]}]}', 'AddSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Add Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to SegmentsRootTable. Redirects to SegmentDetailsPage"}]}]}', 'ExportSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Export Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ExportFileForm","notes":"exportOption1: \'Download Segment (JSON)\', exportOption2: \'Download Segment Lists (JSON)\'"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Export","notes":"Enabled when an option is selected. Closes modal on click"}]}]}', 'EnableFeatureFlagIncludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Enable Include List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to enable \\"{includeListName}\\"?"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Enable","notes":"Closes modal on click. Enables the include list in FeatureFlagIncludeListsTable"}]}]}', 'SaveAsSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Save as a Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentForm","notes":"The \'Name\' field should be empty and focused. The \'App Context\' and \'Tags\' should be filled with the current feature flag\'s values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to SegmentsRootTable. Redirects to SegmentDetailsPage"}]}]}', 'ImportFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Import Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ImportFileForm","notes":"Transitions to ImportFileTable after the file upload"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Import","notes":"Enabled when at least one Compatible or Warning file is uploaded. Closes modal on click. Adds row(s) to FeatureFlagsRootTable"}]}]}', 'EditFeatureFlagExcludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Edit Exclude List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagExcludeListForm","notes":"Form should be filled with current values"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Save","notes":"Enabled when the form is valid and dirty. Closes modal on click. Edits a row in FeatureFlagExcludeListsTable"}]}]}', 'ImportSegmentListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Import List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ImportFileForm","notes":"Transitions to ImportFileTable after the file upload"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Import","notes":"Enabled when at least one Compatible or Warning file is uploaded. Closes modal on click. Adds row(s) to SegmentListsTable"}]}]}', 'ExportAllFeatureFlagsModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Export All Feature Flags"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ExportFileForm","notes":"exportOption1: \'Download Feature Flag Design (JSON)\', exportOption2: \'Email Feature Flag Data (CSV)\'"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Export","notes":"Enabled when an option is selected. Closes modal on click"}]}]}', 'AddFeatureFlagExcludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Add Exclude List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagExcludeListForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to FeatureFlagExcludeListsTable"}]}]}', 'DeleteSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Delete Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"DeleteConfirmationForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Delete","notes":"Enabled when the form is valid. Closes modal on click. Deletes a row from SegmentsRootTable"}]}]}', 'AddSegmentListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Add List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentListForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to SegmentListsTable"}]}]}', 'DisableFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Disable Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to disable \\"{featureFlagName}\\"?"},{"type":"subtext","class":"subtext-red","text":"* All enabled include lists will be disabled."}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Disable","notes":"Closes modal on click. Disables the feature flag on FeatureFlagDetailsPage"}]}]}', 'DuplicateFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Duplicate Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagForm","notes":"Form should be filled with current values. First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid, and \'Name\' and \'Key\' fields are dirty. Closes modal on click. Adds a row to FeatureFlagsRootTable. Redirects to FeatureFlagDetailsPage"}]}]}', 'DuplicateSegmentModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Duplicate Segment"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"SegmentForm","notes":"Form should be filled with current values. First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid, and \'Name\' field is dirty. Closes modal on click. Adds a row to SegmentsRootTable. Redirects to SegmentDetailsPage"}]}]}', 'ExportAllListsModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Export All Lists"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ExportFileForm","notes":"exportOption1: \'Download All Lists (JSON)\', exportOption2: \'Download All List Values (CSV)\'"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Export","notes":"Enabled when an option is selected. Closes modal on click"}]}]}', 'ExportAllSegmentsModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-medium","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Export All Segments"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ExportFileForm","notes":"exportOption1: \'Download All Segments (JSON)\', exportOption2: \'Download All Segment Lists (JSON)\'"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Export","notes":"Enabled when an option is selected. Closes modal on click"}]}]}', 'ImportFeatureFlagListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Import List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"ImportFileForm","notes":"Transitions to ImportFileTable after the file upload"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Import","notes":"Enabled when at least one Compatible or Warning file is uploaded. Closes modal on click. Adds row(s) to FeatureFlagIncludeListsTable or FeatureFlagExcludeListsTable"}]}]}', 'AddFeatureFlagModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-standard","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Add Feature Flag"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-standard","elements":[{"type":"FeatureFlagForm","notes":"First form field should be focused"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat primary button","text":"Create","notes":"Enabled when the form is valid. Closes modal on click. Adds a row to FeatureFlagsRootTable. Redirects to FeatureFlagDetailsPage"}]}]}', 'DeleteFeatureFlagExcludeListModal.json': '{"type":"modal","styles":"ModalStyle","class":"modal-small","elements":[{"type":"header","class":"header","elements":[{"type":"h2","class":"heading","text":"Delete Exclude List"},{"type":"basic icon button","class":"close-button","text":"close"}]},{"type":"content","class":"form-content-padded","elements":[{"type":"message","class":"message","text":"Are you sure you want to delete \\"{excludeListName}\\"?"}]},{"type":"footer","class":"footer","elements":[{"type":"flat basic button","text":"Cancel","notes":"Closes modal on click"},{"type":"flat warn button","text":"Delete","notes":"Closes modal on click. Deletes a row from FeatureFlagExcludeListsTable"}]}]}'}, 'styles': {'ModalStyle.json': '{"type":"modal","style":{"modal-small":"width: 480px, display: flex, flex-direction: column","modal-medium":"width: 560px, display: flex, flex-direction: column","modal-standard":"width: 656px, display: flex, flex-direction: column","modal-large":"width: 864px, display: flex, flex-direction: column","header":"height: 80px, display: flex, justify-content: space-between, align-items: center, padding: 0 32px, border-bottom: 1px solid var(--light-grey)","heading":"font-size: 22px, font-weight: 700, color: var(--light-black)","close-button":"width: 40px, height: 40px, font-size: 14px, color: var(--dark-grey)","form-content-standard":"padding: 32px","form-content-padded":"padding: 40px 32px","message":"font-size: 16px, font-weight: 400, color: var(--dark-grey)","subtext-grey":"font-size: 14px, font-weight: 400, color: var(--dark-grey)","subtext-blue":"font-size: 14px, font-weight: 400, color: var(--blue)","subtext-red":"font-size: 14px, font-weight: 400, color: var(--red)","footer":"height: 80px, display: flex, justify-content: flex-end, align-items: center, column-gap: 8px, padding: 0 32px, border-top: 1px solid var(--light-grey)"}}', 'StatusIndicatorStyle.json': '{"type":"status indicator","notes":"{status} indicates the status text (e.g., Enabled). This can be represented using chips, provided they can be styled appropriately","style":{"status-indicator":"height: 24px, padding: 2px 8px, background-color: var(--status-{status.toLowerCase()}-alpha), border: 1px solid var(--status-{status.toLowerCase()}), border-radius: 4px","status-label":"font-size: 12px, font-weight: 600, color: var(--status-{status.toLowerCase()})"}}', 'CardStyle.json': '{"type":"card","style":{"card":"width: 100%, border: 1px solid var(--light-grey), border-radius: 4px, background-color: var(--white)","header":"height: 96px, display: flex, justify-content: space-between, align-items: center, padding: 0 32px, border-bottom: 1px solid var(--light-grey)","filter-container":"display: flex, flex-direction: row, align-items: center, column-gap: 16px","title-container":"display: flex, flex-direction: column, justify-content: center","heading-container":"display: flex, flex-direction: row, align-items: center, column-gap: 16px","heading":"font-size: 18px, font-weight: 700, color: var(--light-black)","instruction":"font-size: 14px, font-weight: 400, color: var(--dark-grey)","info":"font-size: 14px, font-weight: 400, color: var(--dark-grey)","button-container":"display: flex, flex-direction: row, align-items: center, column-gap: 4px","table-content":"display: flex, justify-content: center, align-items: center, padding: 32px","list-content":"display: flex, flex-direction: column, justify-content: center, align-items: flex-start, padding: 16px 32px","list-item":"font-size: 14px, font-weight: 400, color: var(--dark-grey)","footer":"display: flex, align-items: center, padding: 0 32px"}}', 'FileUploaderStyle.json': '{"type":"file uploader","style":{"file-uploader":"width: 100%, min-height: 200px, border: 1px dashed var(--dark-grey), display: flex, flex-direction: column, justify-content: center, align-items: center, row-gap: 8px, padding: 40px 0","upload-icon":"font-size: 48px, color: var(--dark-grey)","instruction":"font-size: 12px, font-weight: 600, color: var(--dark-grey)","close-button":"position: absolute, top: 4px, right: 4px, width: 40px, height: 40px, font-size: 14px, color: var(--dark-grey)"}}', 'SidenavStyle.json': '{"type":"sidenav","style":{"sidenav":"width: 240px, height: 100%, position: fixed, border: 1px solid var(--light-grey), border-radius: 0 4px 4px 0, background-color: var(--white)","header":"width: 100%, height: 112px, display: flex, flex-direction: column, justify-content: center, align-items: center, row-gap: 8px, border-bottom: 1px solid var(--light-grey)","heading":"font-size: 36px, font-weight: 800, color: var(--blue)","subheading":"font-size: 10px, font-weight: 400, color: var(--light-black)","content":"width: 100%, height: calc(100% - 112px), display: flex, flex-direction: column, align-items: center, row-gap: 8px, padding: 32px 0","list-item":"width: 200px, height: 48px, background-color: var(--white)","list-item-selected":"width: 200px, height: 48px, background-color: var(--blue)","icon":"width: 24px, height: 24px, color: var(--light-black)","icon-selected":"width: 24px, height: 24px, color: var(--white)","text":"font-size: 16px, font-weight: 600, color: var(--light-black)","text-selected":"font-size: 16px, font-weight: 600, color: var(--white)"}}', 'PageStyle.json': '{"type":"page","style":{"page":"width: 100%, height: 100%, background-color: var(--water)","main":"margin-left: 240px, width: calc(100% - 240px), display: flex, flex-direction: column, padding: 0 32px","root-header":"height: 112px, display: flex, flex-direction: column, justify-content: center, row-gap: 4px","heading":"font-size: 26px, font-weight: 700, color: var(--light-black)","subheading":"font-size: 16px, font-weight: 400, color: var(--grey)","details-header":"height: 64px, display: flex, flex-direction: column, justify-content: center","breadcrumb":"font-size: 14px, font-weight: 400, color: var(--light-black)","content":"row-gap: 32px, overflow: scroll"},"notes":"Modifying margin and width for \'main\' class might not be needed depending on Sidenav implementation"}', 'FormStyle.json': '{"type":"form","style":{"form-standard":"width: 100%, display: flex, flex-direction: column, row-gap: 16px","form-compact":"width: 100%, display: flex, flex-direction: column, row-gap: 8px","message":"font-size: 16px, font-weight: 400, color: var(--dark-grey)","group-label":"font-size: 14px, font-weight: 400, color: var(--dark-grey)"}}', 'TableStyle.json': '{"type":"table","style":{"table":"width: 100%","header-row":"width: 100%, height: 48px, padding: 0 32px, background-color: var(--zircon)","body-row":"width: 100%, height: 56px, padding: 0 32px, background-color: var(--white), border-bottom: 1px solid var(--light-grey)","empty-row":"width: 100%, height: 56px, border: 1px dashed var(--light-grey)"}}'}, 'variables': {'Color.json': '{"type":"variable","color":{"--white":"#fff","--zircon":"#f5f7fe","--water":"#f0f2f9","--light-grey":"#dce0e6","--grey":"#929fae","--dark-grey":"#646e7b","--darker-grey":"#444e5b","--light-black":"#222b45","--black":"#000","--blue":"#3366ff","--red":"#ff3333","--status-disabled":"#ff9933","--status-enabled":"#3366ff","--status-archived":"#999999","--status-global":"#ff3333","--status-unused":"#999999","--status-used":"#3366ff","--status-disabled-alpha":"#ff99330c","--status-enabled-alpha":"#3366ff0c","--status-archived-alpha":"#9999990c","--status-global-alpha":"#ff33330c","--status-unused-alpha":"#9999990c","--status-used-alpha":"#3366ff0c"}}'}, 'pages': {'SegmentDetailsPage.json': '{"type":"page","styles":"PageStyle","class":"page","elements":[{"type":"Sidenav","notes":"Fixed to the left side of the page. The \'Segments\' list item is selected"},{"type":"main","class":"main","notes":"Takes up the rest of the page","elements":[{"type":"header","class":"details-header","elements":[{"type":"breadcrumb","class":"breadcrumb","text":"Segments  >  {segmentName}","notes":"\'Segments\' part in the text is hyperlink that links to the SegmentsRootPage"}]},{"type":"content","class":"content","elements":[{"type":"SegmentOverviewCard","notes":"The footer contains \'Lists\' and \'Used By\' tabs"},{"type":"SegmentListsCard","notes":"Displayed when \'Lists\' tab is selected"},{"type":"SegmentUsedByCard","notes":"Displayed when \'Used By\' tab is selected"}]}]}]}', 'SegmentsRootPage.json': '{"type":"page","styles":"PageStyle","class":"page","elements":[{"type":"Sidenav","notes":"Fixed to the left side of the page. The \'Segments\' list item is selected"},{"type":"main","class":"main","notes":"Takes up the rest of the page","elements":[{"type":"header","class":"root-header","elements":[{"type":"h1","class":"heading","text":"Segments"},{"type":"subheading","class":"subheading","text":"Define new segments to include or exclude from any experiment or feature flag"}]},{"type":"content","class":"content","elements":[{"type":"SegmentsRootCard"}]}]}]}', 'FeatureFlagDetailsPage.json': '{"type":"page","styles":"PageStyle","class":"page","elements":[{"type":"Sidenav","notes":"Fixed to the left side of the page. The \'Feature Flags\' list item is selected"},{"type":"main","class":"main","notes":"Takes up the rest of the page","elements":[{"type":"header","class":"details-header","elements":[{"type":"breadcrumb","class":"breadcrumb","text":"Feature Flags  >  {featureFlagName}","notes":"\'Feature Flags\' part in the text is hyperlink that links to the FeatureFlagsRootPage"}]},{"type":"content","class":"content","elements":[{"type":"FeatureFlagOverviewCard","notes":"The footer contains \'Participants\' and \'Data\' tabs"},{"type":"FeatureFlagIncludeListsCard","notes":"Displayed when \'Participants\' tab is selected"},{"type":"FeatureFlagExcludeListsCard","notes":"Displayed when \'Participants\' tab is selected"},{"type":"FeatureFlagExposuresCard","notes":"Displayed when \'Data\' tab is selected"}]}]}]}', 'FeatureFlagsRootPage.json': '{"type":"page","styles":"PageStyle","class":"page","notes":"This is the starting page of the app","elements":[{"type":"Sidenav","notes":"Fixed to the left side of the page. The \'Feature Flags\' list item is selected"},{"type":"main","class":"main","notes":"Takes up the rest of the page","elements":[{"type":"header","class":"root-header","elements":[{"type":"h1","class":"heading","text":"Feature Flags"},{"type":"subheading","class":"subheading","text":"Create and manage feature flags"}]},{"type":"content","class":"content","elements":[{"type":"FeatureFlagsRootCard"}]}]}]}'}}, 'reference': {'tabs': {'Tab group with asynchronously loading tab contents': {'HTML.html': '@if ((asyncTabs | async) === null) {\n  Loading tabs...\n}\n\n<mat-tab-group>\n  @for (tab of asyncTabs | async; track tab) {\n    <mat-tab>\n      <ng-template mat-tab-label>{{tab.label}}</ng-template>\n      {{tab.content}}\n    </mat-tab>\n  }\n</mat-tab-group>', 'TS.ts': "import {Component} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {AsyncPipe} from '@angular/common';\n\nexport interface ExampleTab {\n  label: string;\n  content: string;\n}\n\n/**\n * @title Tab group with asynchronously loading tab contents\n */\n@Component({\n  selector: 'tab-group-async-example',\n  templateUrl: 'tab-group-async-example.html',\n  standalone: true,\n  imports: [MatTabsModule, AsyncPipe],\n})\nexport class TabGroupAsyncExample {\n  asyncTabs: Observable<ExampleTab[]>;\n\n  constructor() {\n    this.asyncTabs = new Observable((observer: Observer<ExampleTab[]>) => {\n      setTimeout(() => {\n        observer.next([\n          {label: 'First', content: 'Content 1'},\n          {label: 'Second', content: 'Content 2'},\n          {label: 'Third', content: 'Content 3'},\n        ]);\n      }, 1000);\n    });\n  }\n}"}, 'Basic use of the tab group': {'HTML.html': '<mat-tab-group>\n  <mat-tab label="First"> Content 1 </mat-tab>\n  <mat-tab label="Second"> Content 2 </mat-tab>\n  <mat-tab label="Third"> Content 3 </mat-tab>\n</mat-tab-group>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\n\n/**\n * @title Basic use of the tab group\n */\n@Component({\n  selector: 'tab-group-basic-example',\n  templateUrl: 'tab-group-basic-example.html',\n  standalone: true,\n  imports: [MatTabsModule],\n})\nexport class TabGroupBasicExample {}"}}, 'tooltip': {'Basic tooltip': {'HTML.html': '<button mat-raised-button\n        matTooltip="Info about the action"\n        aria-label="Button that displays a tooltip when focused or hovered over">\n  Action\n</button>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * @title Basic tooltip\n */\n@Component({\n  selector: 'tooltip-overview-example',\n  templateUrl: 'tooltip-overview-example.html',\n  standalone: true,\n  imports: [MatButtonModule, MatTooltipModule],\n})\nexport class TooltipOverviewExample {}"}, 'Tooltip with a custom position': {'HTML.html': '<mat-form-field class="example-user-input">\n  <mat-label>Tooltip position</mat-label>\n  <mat-select [formControl]="position">\n    @for (positionOption of positionOptions; track positionOption) {\n      <mat-option [value]="positionOption">{{positionOption}}</mat-option>\n    }\n  </mat-select>\n</mat-form-field>\n\n<button mat-raised-button\n        matTooltip="Info about the action"\n        [matTooltipPosition]="position.value!"\n        aria-label="Button that displays a tooltip in various positions">\n  Action\n</button>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TooltipPosition, MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/**\n * @title Tooltip with a custom position\n */\n@Component({\n  selector: 'tooltip-position-example',\n  templateUrl: 'tooltip-position-example.html',\n  styleUrl: 'tooltip-position-example.css',\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatTooltipModule,\n  ],\n})\nexport class TooltipPositionExample {\n  positionOptions: TooltipPosition[] = ['after', 'before', 'above', 'below', 'left', 'right'];\n  position = new FormControl(this.positionOptions[0]);\n}", 'CSS.css': '.example-user-input {\n  margin-right: 8px;\n}'}}, 'sidenav': {'Autosize sidenav': {'HTML.html': '<mat-drawer-container class="example-container" autosize>\n  <mat-drawer #drawer class="example-sidenav" mode="side">\n    <p>Auto-resizing sidenav</p>\n    @if (showFiller) {\n      <p>Lorem, ipsum dolor sit amet consectetur.</p>\n    }\n    <button (click)="showFiller = !showFiller" mat-raised-button>\n      Toggle extra text\n    </button>\n  </mat-drawer>\n\n  <div class="example-sidenav-content">\n    <button type="button" mat-button (click)="drawer.toggle()">\n      Toggle sidenav\n    </button>\n  </div>\n\n</mat-drawer-container>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSidenavModule} from '@angular/material/sidenav';\n\n/**\n * @title Autosize sidenav\n */\n@Component({\n  selector: 'sidenav-autosize-example',\n  templateUrl: 'sidenav-autosize-example.html',\n  styleUrl: 'sidenav-autosize-example.css',\n  standalone: true,\n  imports: [MatSidenavModule, MatButtonModule],\n})\nexport class SidenavAutosizeExample {\n  showFiller = false;\n}", 'CSS.css': '.example-container {\n  width: 500px;\n  height: 300px;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n}\n\n.example-sidenav-content {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n}\n\n.example-sidenav {\n  padding: 20px;\n}'}, 'Basic sidenav': {'HTML.html': '<mat-sidenav-container class="example-container">\n  <mat-sidenav mode="side" opened>Sidenav content</mat-sidenav>\n  <mat-sidenav-content>Main content</mat-sidenav-content>\n</mat-sidenav-container>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatSidenavModule} from '@angular/material/sidenav';\n\n/** @title Basic sidenav */\n@Component({\n  selector: 'sidenav-overview-example',\n  templateUrl: 'sidenav-overview-example.html',\n  styleUrl: 'sidenav-overview-example.css',\n  standalone: true,\n  imports: [MatSidenavModule],\n})\nexport class SidenavOverviewExample {\n}", 'CSS.css': '.example-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: #eee;\n}'}}, 'radio': {'Basic radios': {'HTML.html': '<mat-radio-group aria-label="Select an option">\n  <mat-radio-button value="1">Option 1</mat-radio-button>\n  <mat-radio-button value="2">Option 2</mat-radio-button>\n</mat-radio-group>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatRadioModule} from '@angular/material/radio';\n\n/**\n * @title Basic radios\n */\n@Component({\n  selector: 'radio-overview-example',\n  templateUrl: 'radio-overview-example.html',\n  styleUrl: 'radio-overview-example.css',\n  standalone: true,\n  imports: [MatRadioModule],\n})\nexport class RadioOverviewExample {}", 'CSS.css': '.mat-mdc-radio-button ~ .mat-mdc-radio-button {\n  margin-left: 16px;\n}'}, 'Radios with ngModel': {'HTML.html': '<label id="example-radio-group-label">Pick your favorite season</label>\n<mat-radio-group\n  aria-labelledby="example-radio-group-label"\n  class="example-radio-group"\n  [(ngModel)]="favoriteSeason">\n  @for (season of seasons; track season) {\n    <mat-radio-button class="example-radio-button" [value]="season">{{season}}</mat-radio-button>\n  }\n</mat-radio-group>\n<div>Your favorite season is: {{favoriteSeason}}</div>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\n\n/**\n * @title Radios with ngModel\n */\n@Component({\n  selector: 'radio-ng-model-example',\n  templateUrl: 'radio-ng-model-example.html',\n  styleUrl: 'radio-ng-model-example.css',\n  standalone: true,\n  imports: [MatRadioModule, FormsModule],\n})\nexport class RadioNgModelExample {\n  favoriteSeason: string;\n  seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];\n}", 'CSS.css': '.example-radio-group {\n  display: flex;\n  flex-direction: column;\n  margin: 15px 0;\n  align-items: flex-start;\n}\n\n.example-radio-button {\n  margin: 5px;\n}'}}, 'card': {'Card with sub-title': {'HTML.html': '<mat-card class="example-card">\n  <mat-card-header>\n    <mat-card-title>Shiba Inu</mat-card-title>\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <p>This card indeterminates progress bar.</p>\n    <p>{{longText}}</p>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button>LIKE</button>\n    <button mat-button>SHARE</button>\n  </mat-card-actions>\n</mat-card>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\n\n/**\n * @title Card with sub-title\n */\n@Component({\n  selector: 'card-subtitle-example',\n  templateUrl: 'card-subtitle-example.html',\n  styleUrl: 'card-subtitle-example.css',\n  standalone: true,\n  imports: [MatCardModule, MatButtonModule],\n})\nexport class CardSubtitleExample {\n  longText = `The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog\n  from Japan. A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was\n  originally bred for hunting.`;\n}", 'CSS.css': '.example-card {\n  max-width: 400px;\n}'}, 'Card with actions alignment option': {'HTML.html': '<mat-card>\n  <mat-card-header>\n    <mat-card-title>Actions Buttons</mat-card-title>\n    <mat-card-subtitle>Start</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-actions>\n    <button mat-button>LIKE</button>\n    <button mat-button>SHARE</button>\n  </mat-card-actions>\n</mat-card>\n<br>\n<mat-card>\n  <mat-card-header>\n    <mat-card-title>Actions Buttons</mat-card-title>\n    <mat-card-subtitle>End</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-actions align="end">\n    <button mat-button>LIKE</button>\n    <button mat-button>SHARE</button>\n  </mat-card-actions>\n</mat-card>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\n\n/**\n * @title Card with actions alignment option\n */\n@Component({\n  selector: 'card-actions-example',\n  templateUrl: 'card-actions-example.html',\n  standalone: true,\n  imports: [MatCardModule, MatButtonModule],\n})\nexport class CardActionsExample {}"}, 'Card with footer': {'HTML.html': '<mat-card class="example-card">\n  <mat-card-header>\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\n    <mat-card-title>Shiba Inu</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <p>This card has divider and indeterminate progress as footer</p>\n    <p>{{ longText }}</p>\n    <mat-divider></mat-divider>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button>LIKE</button>\n    <button mat-button>SHARE</button>\n  </mat-card-actions>\n  <mat-card-footer>\n    <mat-progress-bar mode="indeterminate"></mat-progress-bar>\n  </mat-card-footer>\n</mat-card>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatCardModule} from '@angular/material/card';\n\n/**\n * @title Card with footer\n */\n@Component({\n  selector: 'card-footer-example',\n  templateUrl: 'card-footer-example.html',\n  styleUrl: 'card-footer-example.css',\n  standalone: true,\n  imports: [MatCardModule, MatDividerModule, MatButtonModule, MatProgressBarModule],\n})\nexport class CardFooterExample {\n  longText = `The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog\n  from Japan. A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was\n  originally bred for hunting.`;\n}", 'CSS.css': '.example-card {\n  max-width: 400px;\n}'}, 'Basic cards': {'HTML.html': '<mat-card>\n  <mat-card-content>Simple card</mat-card-content>\n</mat-card>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatCardModule} from '@angular/material/card';\n\n/**\n * @title Basic cards\n */\n@Component({\n  selector: 'card-overview-example',\n  templateUrl: 'card-overview-example.html',\n  standalone: true,\n  imports: [MatCardModule],\n})\nexport class CardOverviewExample {}"}}, 'autocomplete': {'Require an autocomplete option to be selected': {'HTML.html': 'Control value: {{myControl.value || \'empty\'}}\n\n<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <mat-label>Number</mat-label>\n    <input #input\n           type="text"\n           placeholder="Pick one"\n           matInput\n           [formControl]="myControl"\n           [matAutocomplete]="auto"\n           (input)="filter()"\n           (focus)="filter()">\n    <mat-autocomplete requireSelection #auto="matAutocomplete">\n      @for (option of filteredOptions; track option) {\n        <mat-option [value]="option">{{option}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n</form>', 'TS.ts': "import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AsyncPipe} from '@angular/common';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/**\n * @title Require an autocomplete option to be selected\n */\n@Component({\n  selector: 'autocomplete-require-selection-example',\n  templateUrl: 'autocomplete-require-selection-example.html',\n  styleUrl: 'autocomplete-require-selection-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n  ],\n})\nexport class AutocompleteRequireSelectionExample {\n  @ViewChild('input') input: ElementRef<HTMLInputElement>;\n  myControl = new FormControl('');\n  options: string[] = ['One', 'Two', 'Three', 'Four', 'Five'];\n  filteredOptions: string[];\n\n  constructor() {\n    this.filteredOptions = this.options.slice();\n  }\n\n  filter(): void {\n    const filterValue = this.input.nativeElement.value.toLowerCase();\n    this.filteredOptions = this.options.filter(o => o.toLowerCase().includes(filterValue));\n  }\n}", 'CSS.css': '.example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n  margin-top: 16px;\n}\n\n.example-full-width {\n  width: 100%;\n}'}, 'Simple autocomplete': {'HTML.html': '<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <mat-label>Number</mat-label>\n    <input type="text"\n           placeholder="Pick one"\n           aria-label="Number"\n           matInput\n           [formControl]="myControl"\n           [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete">\n      @for (option of options; track option) {\n        <mat-option [value]="option">{{option}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n</form>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/**\n * @title Simple autocomplete\n */\n@Component({\n  selector: 'autocomplete-simple-example',\n  templateUrl: 'autocomplete-simple-example.html',\n  styleUrl: 'autocomplete-simple-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AutocompleteSimpleExample {\n  myControl = new FormControl('');\n  options: string[] = ['One', 'Two', 'Three'];\n}", 'CSS.css': '.example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}'}, 'Filter autocomplete': {'HTML.html': '<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <mat-label>Number</mat-label>\n    <input type="text"\n           placeholder="Pick one"\n           aria-label="Number"\n           matInput\n           [formControl]="myControl"\n           [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete">\n      @for (option of filteredOptions | async; track option) {\n        <mat-option [value]="option">{{option}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n</form>', 'TS.ts': "import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {AsyncPipe} from '@angular/common';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/**\n * @title Filter autocomplete\n */\n@Component({\n  selector: 'autocomplete-filter-example',\n  templateUrl: 'autocomplete-filter-example.html',\n  styleUrl: 'autocomplete-filter-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n  ],\n})\nexport class AutocompleteFilterExample implements OnInit {\n  myControl = new FormControl('');\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value || '')),\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n}", 'CSS.css': '.example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}'}, 'Display value autocomplete': {'HTML.html': '<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <mat-label>Assignee</mat-label>\n    <input type="text" matInput [formControl]="myControl" [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete" [displayWith]="displayFn">\n      @for (option of filteredOptions | async; track option) {\n        <mat-option [value]="option">{{option.name}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n</form>', 'TS.ts': "import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {AsyncPipe} from '@angular/common';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\nexport interface User {\n  name: string;\n}\n\n/**\n * @title Display value autocomplete\n */\n@Component({\n  selector: 'autocomplete-display-example',\n  templateUrl: 'autocomplete-display-example.html',\n  styleUrl: 'autocomplete-display-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n  ],\n})\nexport class AutocompleteDisplayExample implements OnInit {\n  myControl = new FormControl<string | User>('');\n  options: User[] = [{name: 'Mary'}, {name: 'Shelley'}, {name: 'Igor'}];\n  filteredOptions: Observable<User[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => {\n        const name = typeof value === 'string' ? value : value?.name;\n        return name ? this._filter(name as string) : this.options.slice();\n      }),\n    );\n  }\n\n  displayFn(user: User): string {\n    return user && user.name ? user.name : '';\n  }\n\n  private _filter(name: string): User[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter(option => option.name.toLowerCase().includes(filterValue));\n  }\n}", 'CSS.css': '.example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}'}}, 'sort': {'Sorting overview': {'HTML.html': '<table matSort (matSortChange)="sortData($event)">\n  <tr>\n    <th mat-sort-header="name">Dessert (100g)</th>\n    <th mat-sort-header="calories">Calories</th>\n    <th mat-sort-header="fat">Fat (g)</th>\n    <th mat-sort-header="carbs">Carbs (g)</th>\n    <th mat-sort-header="protein">Protein (g)</th>\n  </tr>\n\n  @for (dessert of sortedData; track dessert) {\n    <tr>\n      <td>{{dessert.name}}</td>\n      <td>{{dessert.calories}}</td>\n      <td>{{dessert.fat}}</td>\n      <td>{{dessert.carbs}}</td>\n      <td>{{dessert.protein}}</td>\n    </tr>\n  }\n</table>', 'TS.ts': "import {Component} from '@angular/core';\nimport {Sort, MatSortModule} from '@angular/material/sort';\n\nexport interface Dessert {\n  calories: number;\n  carbs: number;\n  fat: number;\n  name: string;\n  protein: number;\n}\n\n/**\n * @title Sorting overview\n */\n@Component({\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrl: 'sort-overview-example.css',\n  standalone: true,\n  imports: [MatSortModule],\n})\nexport class SortOverviewExample {\n  desserts: Dessert[] = [\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\n  ];\n\n  sortedData: Dessert[];\n\n  constructor() {\n    this.sortedData = this.desserts.slice();\n  }\n\n  sortData(sort: Sort) {\n    const data = this.desserts.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      switch (sort.active) {\n        case 'name':\n          return compare(a.name, b.name, isAsc);\n        case 'calories':\n          return compare(a.calories, b.calories, isAsc);\n        case 'fat':\n          return compare(a.fat, b.fat, isAsc);\n        case 'carbs':\n          return compare(a.carbs, b.carbs, isAsc);\n        case 'protein':\n          return compare(a.protein, b.protein, isAsc);\n        default:\n          return 0;\n      }\n    });\n  }\n}\n\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}", 'CSS.css': '.mat-sort-header-container {\n  align-items: center;\n}'}}, 'chips': {'Chips with form control': {'HTML.html': '<div class="example-button-container">\n  <button mat-raised-button (click)="formControl.disable()">Disable form control</button>\n  <button mat-raised-button (click)="formControl.enable()">Enable form control</button>\n</div>\n<p>\n  <em>Enter video keywords</em>\n</p>\n<mat-form-field class="example-form-field">\n  <mat-label>Video keywords</mat-label>\n  <mat-chip-grid #chipGrid aria-label="Enter keywords" [formControl]="formControl" >\n    @for (keyword of keywords; track keyword) {\n      <mat-chip-row (removed)="removeKeyword(keyword)">\n        {{keyword}}\n        <button matChipRemove aria-label="\'remove \' + keyword">\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip-row>\n    }\n  </mat-chip-grid>\n  <input placeholder="New keyword..."\n          [matChipInputFor]="chipGrid"\n          (matChipInputTokenEnd)="add($event)"/>\n</mat-form-field>\n\n<p>\n  <strong>The following keywords are entered:</strong> {{formControl.value}}\n</p>', 'TS.ts': "import {Component, inject} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\n\n/**\n * @title Chips with form control\n */\n@Component({\n  selector: 'chips-form-control-example',\n  templateUrl: 'chips-form-control-example.html',\n  styleUrl: 'chips-form-control-example.css',\n  standalone: true,\n  imports: [\n    MatButtonModule,\n    MatFormFieldModule,\n    MatChipsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule,\n  ],\n})\nexport class ChipsFormControlExample {\n  keywords = ['angular', 'how-to', 'tutorial', 'accessibility'];\n  formControl = new FormControl(['angular']);\n\n  announcer = inject(LiveAnnouncer);\n\n  removeKeyword(keyword: string) {\n    const index = this.keywords.indexOf(keyword);\n    if (index >= 0) {\n      this.keywords.splice(index, 1);\n\n      this.announcer.announce(`removed ${keyword}`);\n    }\n  }\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our keyword\n    if (value) {\n      this.keywords.push(value);\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n}", 'CSS.css': '.example-form-field {\n  width: 100%;\n}\n\n.example-button-container > button {\n  margin: 0 12px;\n}'}, 'Chips Autocomplete': {'HTML.html': '<form>\n  <mat-form-field class="example-chip-list">\n    <mat-label>Favorite Fruits</mat-label>\n    <mat-chip-grid #chipGrid aria-label="Fruit selection">\n      @for (fruit of fruits; track fruit) {\n        <mat-chip-row (removed)="remove(fruit)">\n          {{fruit}}\n          <button matChipRemove [attr.aria-label]="\'remove \' + fruit">\n            <mat-icon>cancel</mat-icon>\n          </button>\n        </mat-chip-row>\n      }\n    </mat-chip-grid>\n    <input placeholder="New Fruit..." #fruitInput [formControl]="fruitCtrl"\n      [matChipInputFor]="chipGrid" [matAutocomplete]="auto"\n      [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n      (matChipInputTokenEnd)="add($event)"/>\n    <mat-autocomplete #auto="matAutocomplete" (optionSelected)="selected($event)">\n      @for (fruit of filteredFruits | async; track fruit) {\n        <mat-option [value]="fruit">{{fruit}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n</form>', 'TS.ts': "import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component, ElementRef, ViewChild, inject} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {MatIconModule} from '@angular/material/icon';\nimport {AsyncPipe} from '@angular/common';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\n\n/**\n * @title Chips Autocomplete\n */\n@Component({\n  selector: 'chips-autocomplete-example',\n  templateUrl: 'chips-autocomplete-example.html',\n  styleUrl: 'chips-autocomplete-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    MatFormFieldModule,\n    MatChipsModule,\n    MatIconModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n  ],\n})\nexport class ChipsAutocompleteExample {\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruitCtrl = new FormControl('');\n  filteredFruits: Observable<string[]>;\n  fruits: string[] = ['Lemon'];\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n\n  @ViewChild('fruitInput') fruitInput: ElementRef<HTMLInputElement>;\n\n  announcer = inject(LiveAnnouncer);\n\n  constructor() {\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\n      startWith(null),\n      map((fruit: string | null) => (fruit ? this._filter(fruit) : this.allFruits.slice())),\n    );\n  }\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.fruits.push(value);\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit: string): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n\n      this.announcer.announce(`Removed ${fruit}`);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.fruits.push(event.option.viewValue);\n    this.fruitInput.nativeElement.value = '';\n    this.fruitCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allFruits.filter(fruit => fruit.toLowerCase().includes(filterValue));\n  }\n}", 'CSS.css': '.example-chip-list {\n  width: 100%;\n}'}, 'Chips with input': {'HTML.html': '<mat-form-field class="example-chip-list">\n  <mat-label>Favorite Fruits</mat-label>\n  <mat-chip-grid #chipGrid aria-label="Enter fruits">\n    @for (fruit of fruits; track fruit) {\n      <mat-chip-row\n        (removed)="remove(fruit)"\n        [editable]="true"\n        (edited)="edit(fruit, $event)"\n        [aria-description]="\'press enter to edit \' + fruit.name">\n        {{fruit.name}}\n        <button matChipRemove [attr.aria-label]="\'remove \' + fruit.name">\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip-row>\n    }\n    <input placeholder="New fruit..."\n           [matChipInputFor]="chipGrid"\n           [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n           [matChipInputAddOnBlur]="addOnBlur"\n           (matChipInputTokenEnd)="add($event)"/>\n  </mat-chip-grid>\n</mat-form-field>', 'TS.ts': "import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component, inject} from '@angular/core';\nimport {MatChipEditedEvent, MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\n\nexport interface Fruit {\n  name: string;\n}\n\n/**\n * @title Chips with input\n */\n@Component({\n  selector: 'chips-input-example',\n  templateUrl: 'chips-input-example.html',\n  styleUrl: 'chips-input-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatChipsModule, MatIconModule],\n})\nexport class ChipsInputExample {\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n  fruits: Fruit[] = [{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}];\n\n  announcer = inject(LiveAnnouncer);\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.fruits.push({name: value});\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n\n  remove(fruit: Fruit): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n\n      this.announcer.announce(`Removed ${fruit}`);\n    }\n  }\n\n  edit(fruit: Fruit, event: MatChipEditedEvent) {\n    const value = event.value.trim();\n\n    // Remove fruit if it no longer has a name\n    if (!value) {\n      this.remove(fruit);\n      return;\n    }\n\n    // Edit existing fruit\n    const index = this.fruits.indexOf(fruit);\n    if (index >= 0) {\n      this.fruits[index].name = value;\n    }\n  }\n}", 'CSS.css': '.example-chip-list {\n  width: 100%;\n}'}}, 'input': {'Basic Inputs': {'HTML.html': '<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <mat-label>Favorite food</mat-label>\n    <input matInput placeholder="Ex. Pizza" value="Sushi" />\n  </mat-form-field>\n\n  <mat-form-field class="example-full-width">\n    <mat-label>Leave a comment</mat-label>\n    <textarea matInput placeholder="Ex. It makes me feel..."></textarea>\n  </mat-form-field>\n</form>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule} from '@angular/forms';\n\n/**\n * @title Basic Inputs\n */\n@Component({\n  selector: 'input-overview-example',\n  styleUrl: 'input-overview-example.css',\n  templateUrl: 'input-overview-example.html',\n  standalone: true,\n  imports: [FormsModule, MatFormFieldModule, MatInputModule],\n})\nexport class InputOverviewExample {}", 'CSS.css': '.example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}'}}, 'slide-toggle': {'Basic slide-toggles': {'HTML.html': '<mat-slide-toggle>Slide me!</mat-slide-toggle>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n/**\n * @title Basic slide-toggles\n */\n@Component({\n  selector: 'slide-toggle-overview-example',\n  templateUrl: 'slide-toggle-overview-example.html',\n  standalone: true,\n  imports: [MatSlideToggleModule],\n})\nexport class SlideToggleOverviewExample {}"}, 'Slide-toggle with forms': {'HTML.html': '<p>Slide Toggle using a simple NgModel.</p>\n\n<mat-slide-toggle [(ngModel)]="isChecked">Slide Toggle Checked: {{isChecked}}</mat-slide-toggle>\n\n<p>Slide Toggle inside of a Template-driven form</p>\n\n<form class="example-form" #form="ngForm" (ngSubmit)="alertFormValues(form.form)">\n\n  <mat-slide-toggle ngModel name="enableWifi">Enable Wifi</mat-slide-toggle>\n  <mat-slide-toggle ngModel name="acceptTerms" required>Accept Terms of Service</mat-slide-toggle>\n\n  <button mat-raised-button type="submit">Save Settings</button>\n</form>\n\n<p>Slide Toggle inside of a Reactive form</p>\n\n<form class="example-form" [formGroup]="formGroup" (ngSubmit)="alertFormValues(formGroup)" ngNativeValidate>\n\n  <mat-slide-toggle formControlName="enableWifi">Enable Wifi</mat-slide-toggle>\n  <mat-slide-toggle formControlName="acceptTerms">Accept Terms of Service</mat-slide-toggle>\n\n  <p>Form Group Status: {{formGroup.status}}</p>\n\n  <button mat-raised-button type="submit">Save Settings</button>\n</form>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {\n  MatSlideToggleModule,\n  _MatSlideToggleRequiredValidatorModule,\n} from '@angular/material/slide-toggle';\n\n/**\n * @title Slide-toggle with forms\n */\n@Component({\n  selector: 'slide-toggle-forms-example',\n  templateUrl: './slide-toggle-forms-example.html',\n  styleUrl: './slide-toggle-forms-example.css',\n  standalone: true,\n  imports: [\n    MatSlideToggleModule,\n    FormsModule,\n    _MatSlideToggleRequiredValidatorModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class SlideToggleFormsExample {\n  isChecked = true;\n  formGroup = this._formBuilder.group({\n    enableWifi: '',\n    acceptTerms: ['', Validators.requiredTrue],\n  });\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  alertFormValues(formGroup: FormGroup) {\n    alert(JSON.stringify(formGroup.value, null, 2));\n  }\n}", 'CSS.css': '.example-form mat-slide-toggle {\n  margin: 8px 0;\n  display: block;\n}'}}, 'datepicker': {'Basic datepicker': {'HTML.html': '<mat-form-field>\n  <mat-label>Choose a date</mat-label>\n  <input matInput [matDatepicker]="picker">\n  <mat-hint>MM/DD/YYYY</mat-hint>\n  <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>\n  <mat-datepicker #picker></mat-datepicker>\n</mat-form-field>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {provideNativeDateAdapter} from '@angular/material/core';\n\n/** @title Basic datepicker */\n@Component({\n  selector: 'datepicker-overview-example',\n  templateUrl: 'datepicker-overview-example.html',\n  standalone: true,\n  providers: [provideNativeDateAdapter()],\n  imports: [MatFormFieldModule, MatInputModule, MatDatepickerModule],\n})\nexport class DatepickerOverviewExample {}"}}, 'checkbox': {'Basic checkboxes': {'HTML.html': '<section class="example-section">\n  <mat-checkbox class="example-margin">Check me!</mat-checkbox>\n  <mat-checkbox class="example-margin" [disabled]="true">Disabled</mat-checkbox>\n</section>\n\n<section class="example-section">\n  <span class="example-list-section">\n    <mat-checkbox class="example-margin"\n                  [checked]="allComplete"\n                  [color]="task.color"\n                  [indeterminate]="someComplete()"\n                  (change)="setAll($event.checked)">\n      {{task.name}}\n    </mat-checkbox>\n  </span>\n  <span class="example-list-section">\n    <ul>\n      @for (subtask of task.subtasks; track subtask) {\n        <li>\n          <mat-checkbox [(ngModel)]="subtask.completed"\n                        [color]="subtask.color"\n                        (ngModelChange)="updateAllComplete()">\n            {{subtask.name}}\n          </mat-checkbox>\n        </li>\n      }\n    </ul>\n  </span>\n</section>', 'TS.ts': "import {Component} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\nexport interface Task {\n  name: string;\n  completed: boolean;\n  color: ThemePalette;\n  subtasks?: Task[];\n}\n\n/**\n * @title Basic checkboxes\n */\n@Component({\n  selector: 'checkbox-overview-example',\n  templateUrl: 'checkbox-overview-example.html',\n  styleUrl: 'checkbox-overview-example.css',\n  standalone: true,\n  imports: [MatCheckboxModule, FormsModule],\n})\nexport class CheckboxOverviewExample {\n  task: Task = {\n    name: 'Indeterminate',\n    completed: false,\n    color: 'primary',\n    subtasks: [\n      {name: 'Primary', completed: false, color: 'primary'},\n      {name: 'Accent', completed: false, color: 'accent'},\n      {name: 'Warn', completed: false, color: 'warn'},\n    ],\n  };\n\n  allComplete: boolean = false;\n\n  updateAllComplete() {\n    this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.completed);\n  }\n\n  someComplete(): boolean {\n    if (this.task.subtasks == null) {\n      return false;\n    }\n    return this.task.subtasks.filter(t => t.completed).length > 0 && !this.allComplete;\n  }\n\n  setAll(completed: boolean) {\n    this.allComplete = completed;\n    if (this.task.subtasks == null) {\n      return;\n    }\n    this.task.subtasks.forEach(t => (t.completed = completed));\n  }\n}", 'CSS.css': '.example-section {\n  margin: 12px 0;\n}\n\n.example-margin {\n  margin: 0 12px;\n}\n\nul {\n  list-style-type: none;\n  margin-top: 4px;\n}'}, 'Checkboxes with reactive forms': {'HTML.html': '<section class="example-section" [formGroup]="toppings">\n  <h4>Select your toppings:</h4>\n  <p><mat-checkbox formControlName="pepperoni">Pepperoni</mat-checkbox></p>\n  <p><mat-checkbox formControlName="extracheese">Extra Cheese</mat-checkbox></p>\n  <p><mat-checkbox formControlName="mushroom">Mushroom</mat-checkbox></p>\n</section>\n\n<section class="example-section" [formGroup]="toppings">\n  <h4>You chose:</h4>\n  {{toppings.value | json}}\n</section>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormBuilder, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {JsonPipe} from '@angular/common';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\n/** @title Checkboxes with reactive forms */\n@Component({\n  selector: 'checkbox-reactive-forms-example',\n  templateUrl: 'checkbox-reactive-forms-example.html',\n  styleUrl: 'checkbox-reactive-forms-example.css',\n  standalone: true,\n  imports: [FormsModule, ReactiveFormsModule, MatCheckboxModule, JsonPipe],\n})\nexport class CheckboxReactiveFormsExample {\n  toppings = this._formBuilder.group({\n    pepperoni: false,\n    extracheese: false,\n    mushroom: false,\n  });\n\n  constructor(private _formBuilder: FormBuilder) {}\n}", 'CSS.css': '.example-section {\n  margin: 12px 0;\n}'}}, 'dialog': {'Injecting data when opening a dialog': {'HTML.html': '<button mat-button (click)="openDialog()">Open dialog</button>', 'TS.ts': "import {Component, Inject} from '@angular/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_DATA,\n  MatDialogTitle,\n  MatDialogContent,\n} from '@angular/material/dialog';\nimport {MatButtonModule} from '@angular/material/button';\n\nexport interface DialogData {\n  animal: 'panda' | 'unicorn' | 'lion';\n}\n\n/**\n * @title Injecting data when opening a dialog\n */\n@Component({\n  selector: 'dialog-data-example',\n  templateUrl: 'dialog-data-example.html',\n  standalone: true,\n  imports: [MatButtonModule],\n})\nexport class DialogDataExample {\n  constructor(public dialog: MatDialog) {}\n\n  openDialog() {\n    this.dialog.open(DialogDataExampleDialog, {\n      data: {\n        animal: 'panda',\n      },\n    });\n  }\n}\n\n@Component({\n  selector: 'dialog-data-example-dialog',\n  templateUrl: 'dialog-data-example-dialog.html',\n  standalone: true,\n  imports: [MatDialogTitle, MatDialogContent],\n})\nexport class DialogDataExampleDialog {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) {}\n}", 'dialog-data-example-dialog.html': "<h2 mat-dialog-title>Favorite Animal</h2>\n<mat-dialog-content>\n  My favorite animal is:\n  <ul>\n    <li>\n      @if (data.animal === 'panda') {\n        <span>&#10003;</span>\n      } Panda\n    </li>\n    <li>\n      @if (data.animal === 'unicorn') {\n        <span>&#10003;</span>\n      } Unicorn\n    </li>\n    <li>\n      @if (data.animal === 'lion') {\n        <span>&#10003;</span>\n      } Lion\n    </li>\n  </ul>\n</mat-dialog-content>"}, 'Dialog launched from a menu': {'HTML.html': '<button mat-button [matMenuTriggerFor]="menu" #menuTrigger>Menu</button>\n<mat-menu #menu="matMenu">\n  <button mat-menu-item (click)="openDialog()">Open dialog</button>\n</mat-menu>', 'dialog-from-menu-example-dialog.html': '<mat-dialog-content>\n  This is a dialog\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Okay</button>\n</mat-dialog-actions>', 'TS.ts': "import {Component, ViewChild} from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n} from '@angular/material/dialog';\nimport {MatMenuTrigger, MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\n/**\n * @title Dialog launched from a menu\n */\n@Component({\n  selector: 'dialog-from-menu-example',\n  templateUrl: 'dialog-from-menu-example.html',\n  standalone: true,\n  imports: [MatButtonModule, MatMenuModule],\n})\nexport class DialogFromMenuExample {\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\n\n  constructor(public dialog: MatDialog) {}\n\n  openDialog() {\n    const dialogRef = this.dialog.open(DialogFromMenuExampleDialog, {restoreFocus: false});\n\n    // Manually restore focus to the menu trigger since the element that\n    // opens the dialog won't be in the DOM any more when the dialog closes.\n    dialogRef.afterClosed().subscribe(() => this.menuTrigger.focus());\n  }\n}\n\n@Component({\n  selector: 'dialog-from-menu-dialog',\n  templateUrl: 'dialog-from-menu-example-dialog.html',\n  standalone: true,\n  imports: [MatDialogContent, MatDialogActions, MatDialogClose, MatButtonModule],\n})\nexport class DialogFromMenuExampleDialog {}"}, 'Dialog elements': {'HTML.html': '<button mat-button (click)="openDialog()">Launch dialog</button>', 'dialog-elements-example-dialog.html': '<h2 mat-dialog-title>Dialog with elements</h2>\n<mat-dialog-content>This dialog showcases the title, close, content and actions elements.</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>', 'TS.ts': "import {Component} from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * @title Dialog elements\n */\n@Component({\n  selector: 'dialog-elements-example',\n  templateUrl: 'dialog-elements-example.html',\n  standalone: true,\n  imports: [MatButtonModule],\n})\nexport class DialogElementsExample {\n  constructor(public dialog: MatDialog) {}\n\n  openDialog() {\n    this.dialog.open(DialogElementsExampleDialog);\n  }\n}\n\n@Component({\n  selector: 'dialog-elements-example-dialog',\n  templateUrl: 'dialog-elements-example-dialog.html',\n  standalone: true,\n  imports: [MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, MatButtonModule],\n})\nexport class DialogElementsExampleDialog {}"}, 'Dialog Overview': {'dialog-overview-example-dialog.html': '<h2 mat-dialog-title>Hi {{data.name}}</h2>\n<mat-dialog-content>\n  <p>What\'s your favorite animal?</p>\n  <mat-form-field>\n    <mat-label>Favorite Animal</mat-label>\n    <input matInput [(ngModel)]="data.animal">\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button (click)="onNoClick()">No Thanks</button>\n  <button mat-button [mat-dialog-close]="data.animal" cdkFocusInitial>Ok</button>\n</mat-dialog-actions>', 'HTML.html': '<ol>\n  <li>\n    <mat-form-field>\n      <mat-label>What\'s your name?</mat-label>\n      <input matInput [(ngModel)]="name">\n    </mat-form-field>\n  </li>\n  <li>\n    <button mat-raised-button (click)="openDialog()">Pick one</button>\n  </li>\n  @if (animal) {\n    <li>You chose: <em>{{animal}}</em></li>\n  }\n</ol>', 'TS.ts': "import {Component, Inject} from '@angular/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogContent,\n  MatDialogActions,\n  MatDialogClose,\n} from '@angular/material/dialog';\nimport {MatButtonModule} from '@angular/material/button';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\nexport interface DialogData {\n  animal: string;\n  name: string;\n}\n\n/**\n * @title Dialog Overview\n */\n@Component({\n  selector: 'dialog-overview-example',\n  templateUrl: 'dialog-overview-example.html',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, FormsModule, MatButtonModule],\n})\nexport class DialogOverviewExample {\n  animal: string;\n  name: string;\n\n  constructor(public dialog: MatDialog) {}\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n      data: {name: this.name, animal: this.animal},\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n}\n\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatButtonModule,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatDialogClose,\n  ],\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}"}}, 'form-field': {'Simple form field': {'HTML.html': '<mat-form-field>\n  <mat-label>Input</mat-label>\n  <input matInput>\n</mat-form-field>\n<mat-form-field>\n  <mat-label>Select</mat-label>\n  <mat-select>\n    <mat-option value="one">First option</mat-option>\n    <mat-option value="two">Second option</mat-option>\n  </mat-select>\n</mat-form-field>\n<mat-form-field>\n  <mat-label>Textarea</mat-label>\n  <textarea matInput></textarea>\n</mat-form-field>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/** @title Simple form field */\n@Component({\n  selector: 'form-field-overview-example',\n  templateUrl: 'form-field-overview-example.html',\n  styleUrl: 'form-field-overview-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatSelectModule],\n})\nexport class FormFieldOverviewExample {}", 'CSS.css': ':host {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}'}, 'Form field with prefix & suffix': {'HTML.html': '<div class="example-container">\n  <mat-form-field>\n    <mat-label>Enter your password</mat-label>\n    <input matInput [type]="hide ? \'password\' : \'text\'">\n    <button mat-icon-button matSuffix (click)="hide = !hide" [attr.aria-label]="\'Hide password\'" [attr.aria-pressed]="hide">\n      <mat-icon>{{hide ? \'visibility_off\' : \'visibility\'}}</mat-icon>\n    </button>\n  </mat-form-field>\n\n  <mat-form-field floatLabel="always">\n    <mat-label>Amount</mat-label>\n    <input matInput type="number" class="example-right-align" placeholder="0">\n    <span matTextPrefix>$&nbsp;</span>\n    <span matTextSuffix>.00</span>\n  </mat-form-field>\n</div>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/** @title Form field with prefix & suffix */\n@Component({\n  selector: 'form-field-prefix-suffix-example',\n  templateUrl: 'form-field-prefix-suffix-example.html',\n  styleUrl: 'form-field-prefix-suffix-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatButtonModule, MatIconModule],\n})\nexport class FormFieldPrefixSuffixExample {\n  hide = true;\n}", 'CSS.css': '.example-container mat-form-field + mat-form-field {\n  margin-left: 8px;\n}\n\n.example-right-align {\n  text-align: right;\n}\n\ninput.example-right-align::-webkit-outer-spin-button,\ninput.example-right-align::-webkit-inner-spin-button {\n  display: none;\n}\n\ninput.example-right-align {\n  -moz-appearance: textfield;\n}'}, 'Form field with label': {'HTML.html': '<div class="example-container">\n  <form [formGroup]="options">\n    <mat-checkbox [formControl]="hideRequiredControl">Hide required marker</mat-checkbox>\n    <div>\n      <label>Float label: </label>\n      <mat-radio-group [formControl]="floatLabelControl">\n        <mat-radio-button value="auto">Auto</mat-radio-button>\n        <mat-radio-button value="always">Always</mat-radio-button>\n      </mat-radio-group>\n    </div>\n\n    <div class="example-form-fields">\n      <mat-form-field\n          [hideRequiredMarker]="hideRequiredControl.value"\n          [floatLabel]="getFloatLabelValue()">\n        <input matInput placeholder="Simple placeholder" required>\n      </mat-form-field>\n\n      <mat-form-field [floatLabel]="getFloatLabelValue()">\n        <mat-label>Both a label and a placeholder</mat-label>\n        <input matInput placeholder="Simple placeholder">\n      </mat-form-field>\n\n      <mat-form-field\n          [hideRequiredMarker]="hideRequiredControl.value"\n          [floatLabel]="getFloatLabelValue()">\n        <mat-select required>\n          <mat-option>-- None --</mat-option>\n          <mat-option value="option">Option</mat-option>\n        </mat-select>\n        <mat-label><mat-icon>favorite</mat-icon> <strong> Fancy</strong> <em> label</em></mat-label>\n      </mat-form-field>\n    </div>\n  </form>\n</div>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormBuilder, FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FloatLabelType, MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\n/** @title Form field with label */\n@Component({\n  selector: 'form-field-label-example',\n  templateUrl: 'form-field-label-example.html',\n  styleUrl: 'form-field-label-example.css',\n  standalone: true,\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatIconModule,\n  ],\n})\nexport class FormFieldLabelExample {\n  hideRequiredControl = new FormControl(false);\n  floatLabelControl = new FormControl('auto' as FloatLabelType);\n  options = this._formBuilder.group({\n    hideRequired: this.hideRequiredControl,\n    floatLabel: this.floatLabelControl,\n  });\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  getFloatLabelValue(): FloatLabelType {\n    return this.floatLabelControl.value || 'auto';\n  }\n}", 'CSS.css': '.example-container mat-form-field + mat-form-field {\n  margin-left: 8px;\n}\n\n.example-container mat-form-field {\n  width: 220px;\n}\n\n.example-container form {\n  margin-bottom: 20px;\n}\n\n.example-container form > * {\n  margin: 12px 0;\n}\n\n.example-container .mat-radio-button {\n  margin: 0 12px;\n}\n\n.example-form-fields {\n  display: flex;\n  align-items: flex-start;\n}'}, 'Form field with error messages': {'HTML.html': '<div class="example-container">\n  <mat-form-field>\n    <mat-label>Enter your email</mat-label>\n    <input matInput\n           placeholder="pat@example.com"\n           [formControl]="email"\n           (blur)="updateErrorMessage()"\n           required>\n    @if (email.invalid) {\n      <mat-error>{{errorMessage}}</mat-error>\n    }\n  </mat-form-field>\n</div>', 'TS.ts': "import {Component} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {merge} from 'rxjs';\n\n/** @title Form field with error messages */\n@Component({\n  selector: 'form-field-error-example',\n  templateUrl: 'form-field-error-example.html',\n  styleUrl: 'form-field-error-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule],\n})\nexport class FormFieldErrorExample {\n  email = new FormControl('', [Validators.required, Validators.email]);\n\n  errorMessage = '';\n\n  constructor() {\n    merge(this.email.statusChanges, this.email.valueChanges)\n      .pipe(takeUntilDestroyed())\n      .subscribe(() => this.updateErrorMessage());\n  }\n\n  updateErrorMessage() {\n    if (this.email.hasError('required')) {\n      this.errorMessage = 'You must enter a value';\n    } else if (this.email.hasError('email')) {\n      this.errorMessage = 'Not a valid email';\n    } else {\n      this.errorMessage = '';\n    }\n  }\n}", 'CSS.css': '.example-container mat-form-field + mat-form-field {\n  margin-left: 8px;\n}'}, 'Form field appearance variants': {'HTML.html': '<p>\n  <mat-form-field appearance="fill">\n    <mat-label>Fill form field</mat-label>\n    <input matInput placeholder="Placeholder">\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\n    <mat-hint>Hint</mat-hint>\n  </mat-form-field>\n</p>\n<p>\n  <mat-form-field appearance="outline">\n    <mat-label>Outline form field</mat-label>\n    <input matInput placeholder="Placeholder">\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\n    <mat-hint>Hint</mat-hint>\n  </mat-form-field>\n</p>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/** @title Form field appearance variants */\n@Component({\n  selector: 'form-field-appearance-example',\n  templateUrl: 'form-field-appearance-example.html',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatIconModule],\n})\nexport class FormFieldAppearanceExample {}"}, 'Form field with hints': {'HTML.html': '<div class="example-container">\n  <mat-form-field hintLabel="Max 10 characters">\n    <mat-label>Enter some input</mat-label>\n    <input matInput #input maxlength="10" placeholder="Ex. Nougat">\n    <mat-hint align="end">{{input.value.length}}/10</mat-hint>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Select me</mat-label>\n    <mat-select>\n      <mat-option value="option">Option</mat-option>\n    </mat-select>\n    <mat-hint align="end">Here\'s the dropdown arrow ^</mat-hint>\n  </mat-form-field>\n</div>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/** @title Form field with hints */\n@Component({\n  selector: 'form-field-hint-example',\n  templateUrl: 'form-field-hint-example.html',\n  styleUrl: 'form-field-hint-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatSelectModule],\n})\nexport class FormFieldHintExample {}", 'CSS.css': '.example-container mat-form-field + mat-form-field {\n  margin-left: 8px;\n}'}}, 'expansion': {'Accordion with expandcollapse all toggles': {'HTML.html': '<div class="example-action-buttons">\n  <button mat-button (click)="accordion.openAll()">Expand All</button>\n  <button mat-button (click)="accordion.closeAll()">Collapse All</button>\n</div>\n<mat-accordion class="example-headers-align" multi>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Personal data\n      </mat-panel-title>\n      <mat-panel-description>\n        Type your name and age\n        <mat-icon>account_circle</mat-icon>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <mat-form-field>\n      <mat-label>First name</mat-label>\n      <input matInput>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Age</mat-label>\n      <input matInput type="number" min="1">\n    </mat-form-field>\n\n  </mat-expansion-panel>\n  <mat-expansion-panel disabled>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Destination\n      </mat-panel-title>\n      <mat-panel-description>\n        Type the country name\n        <mat-icon>map</mat-icon>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <mat-form-field>\n      <mat-label>Country</mat-label>\n      <input matInput>\n    </mat-form-field>\n  </mat-expansion-panel>\n\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Day of the trip\n      </mat-panel-title>\n      <mat-panel-description>\n        Inform the date you wish to travel\n        <mat-icon>date_range</mat-icon>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <mat-form-field>\n      <mat-label>Date</mat-label>\n      <input matInput [matDatepicker]="picker" (focus)="picker.open()" readonly>\n    </mat-form-field>\n    <mat-datepicker #picker></mat-datepicker>\n  </mat-expansion-panel>\n</mat-accordion>', 'TS.ts': "import {Component, ViewChild} from '@angular/core';\nimport {MatAccordion, MatExpansionModule} from '@angular/material/expansion';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {provideNativeDateAdapter} from '@angular/material/core';\n\n/**\n * @title Accordion with expand/collapse all toggles\n */\n@Component({\n  selector: 'expansion-expand-collapse-all-example',\n  templateUrl: 'expansion-expand-collapse-all-example.html',\n  styleUrl: 'expansion-expand-collapse-all-example.css',\n  standalone: true,\n  providers: [provideNativeDateAdapter()],\n  imports: [\n    MatButtonModule,\n    MatExpansionModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatDatepickerModule,\n  ],\n})\nexport class ExpansionExpandCollapseAllExample {\n  @ViewChild(MatAccordion) accordion: MatAccordion;\n}", 'CSS.css': '.example-action-buttons {\n  padding-bottom: 20px;\n}\n\n.example-headers-align .mat-expansion-panel-header-description {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.example-headers-align .mat-mdc-form-field + .mat-mdc-form-field {\n  margin-left: 8px;\n}'}, 'Basic expansion panel': {'HTML.html': '<mat-accordion>\n  <mat-expansion-panel hideToggle>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        This is the expansion title\n      </mat-panel-title>\n      <mat-panel-description>\n        This is a summary of the content\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <p>This is the primary content of the panel.</p>\n  </mat-expansion-panel>\n  <mat-expansion-panel (opened)="panelOpenState = true"\n                       (closed)="panelOpenState = false">\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Self aware panel\n      </mat-panel-title>\n      <mat-panel-description>\n        Currently I am {{panelOpenState ? \'open\' : \'closed\'}}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <p>I\'m visible because I am open</p>\n  </mat-expansion-panel>\n</mat-accordion>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\n/**\n * @title Basic expansion panel\n */\n@Component({\n  selector: 'expansion-overview-example',\n  templateUrl: 'expansion-overview-example.html',\n  standalone: true,\n  imports: [MatExpansionModule],\n})\nexport class ExpansionOverviewExample {\n  panelOpenState = false;\n}"}}, 'button': {'Basic buttons': {'HTML.html': '<section>\n  <div class="example-label">Basic</div>\n  <div class="example-button-row">\n    <button mat-button>Basic</button>\n    <button mat-button color="primary">Primary</button>\n    <button mat-button color="accent">Accent</button>\n    <button mat-button color="warn">Warn</button>\n    <button mat-button disabled>Disabled</button>\n    <a mat-button href="https://www.google.com/" target="_blank">Link</a>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">Raised</div>\n  <div class="example-button-row">\n    <button mat-raised-button>Basic</button>\n    <button mat-raised-button color="primary">Primary</button>\n    <button mat-raised-button color="accent">Accent</button>\n    <button mat-raised-button color="warn">Warn</button>\n    <button mat-raised-button disabled>Disabled</button>\n    <a mat-raised-button href="https://www.google.com/" target="_blank">Link</a>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">Stroked</div>\n  <div class="example-button-row">\n    <button mat-stroked-button>Basic</button>\n    <button mat-stroked-button color="primary">Primary</button>\n    <button mat-stroked-button color="accent">Accent</button>\n    <button mat-stroked-button color="warn">Warn</button>\n    <button mat-stroked-button disabled>Disabled</button>\n    <a mat-stroked-button href="https://www.google.com/" target="_blank">Link</a>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">Flat</div>\n  <div class="example-button-row">\n    <button mat-flat-button>Basic</button>\n    <button mat-flat-button color="primary">Primary</button>\n    <button mat-flat-button color="accent">Accent</button>\n    <button mat-flat-button color="warn">Warn</button>\n    <button mat-flat-button disabled>Disabled</button>\n    <a mat-flat-button href="https://www.google.com/" target="_blank">Link</a>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">Icon</div>\n  <div class="example-button-row">\n    <div class="example-flex-container">\n      <button mat-icon-button aria-label="Example icon button with a vertical three dot icon">\n        <mat-icon>more_vert</mat-icon>\n      </button>\n      <button mat-icon-button color="primary" aria-label="Example icon button with a home icon">\n        <mat-icon>home</mat-icon>\n      </button>\n      <button mat-icon-button color="accent" aria-label="Example icon button with a menu icon">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <button mat-icon-button color="warn" aria-label="Example icon button with a heart icon">\n        <mat-icon>favorite</mat-icon>\n      </button>\n      <button mat-icon-button disabled aria-label="Example icon button with a open in new tab icon">\n        <mat-icon>open_in_new</mat-icon>\n      </button>\n    </div>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">FAB</div>\n  <div class="example-button-row">\n    <div class="example-flex-container">\n      <div class="example-button-container">\n        <button mat-fab color="primary" aria-label="Example icon button with a delete icon">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-fab color="accent" aria-label="Example icon button with a bookmark icon">\n          <mat-icon>bookmark</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-fab color="warn" aria-label="Example icon button with a home icon">\n          <mat-icon>home</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-fab disabled aria-label="Example icon button with a heart icon">\n          <mat-icon>favorite</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</section>\n<mat-divider></mat-divider>\n<section>\n  <div class="example-label">Mini FAB</div>\n  <div class="example-button-row">\n    <div class="example-flex-container">\n      <div class="example-button-container">\n        <button mat-mini-fab color="primary" aria-label="Example icon button with a menu icon">\n          <mat-icon>menu</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-mini-fab color="accent" aria-label="Example icon button with a plus one icon">\n          <mat-icon>plus_one</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-mini-fab color="warn" aria-label="Example icon button with a filter list icon">\n          <mat-icon>filter_list</mat-icon>\n        </button>\n      </div>\n      <div class="example-button-container">\n        <button mat-mini-fab disabled aria-label="Example icon button with a home icon">\n          <mat-icon>home</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</section>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * @title Basic buttons\n */\n@Component({\n  selector: 'button-overview-example',\n  templateUrl: 'button-overview-example.html',\n  styleUrl: 'button-overview-example.css',\n  standalone: true,\n  imports: [MatButtonModule, MatDividerModule, MatIconModule],\n})\nexport class ButtonOverviewExample {}", 'CSS.css': 'section {\n  display: table;\n}\n\n.example-label {\n  display: table-cell;\n  font-size: 14px;\n  margin-left: 8px;\n  min-width: 120px;\n}\n\n.example-button-row {\n  display: table-cell;\n  max-width: 600px;\n}\n\n.example-button-row .mat-mdc-button-base {\n  margin: 8px 8px 8px 0;\n}\n\n.example-flex-container {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n.example-button-container {\n  display: flex;\n  justify-content: center;\n  width: 120px;\n}'}, 'Interactive disabled buttons': {'HTML.html': '<button\n  mat-raised-button\n  disabled\n  disabledInteractive\n  matTooltip="This is a tooltip!">Disabled button allowing interactivity</button>\n\n<button\n  mat-raised-button\n  disabled\n  matTooltip="This is a tooltip!">Default disabled button</button>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {MatTooltip} from '@angular/material/tooltip';\n\n/**\n * @title Interactive disabled buttons\n */\n@Component({\n  selector: 'button-disabled-interactive-example',\n  templateUrl: 'button-disabled-interactive-example.html',\n  styleUrl: 'button-disabled-interactive-example.css',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n})\nexport class ButtonDisabledInteractiveExample {}", 'CSS.css': 'button {\n  margin-right: 8px;\n}'}}, 'table': {'Table with filtering': {'HTML.html': '<mat-form-field>\n  <mat-label>Filter</mat-label>\n  <input matInput (keyup)="applyFilter($event)" placeholder="Ex. ium" #input>\n</mat-form-field>\n\n<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n  <!-- Position Column -->\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  <!-- Name Column -->\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  <!-- Weight Column -->\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  <!-- Symbol Column -->\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n\n  <!-- Row shown when there is no matching data. -->\n  <tr class="mat-row" *matNoDataRow>\n    <td class="mat-cell" colspan="4">No data matching the filter "{{input.value}}"</td>\n  </tr>\n</table>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatTableDataSource, MatTableModule} from '@angular/material/table';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n];\n\n/**\n * @title Table with filtering\n */\n@Component({\n  selector: 'table-filtering-example',\n  styleUrl: 'table-filtering-example.css',\n  templateUrl: 'table-filtering-example.html',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatTableModule],\n})\nexport class TableFilteringExample {\n  displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n}", 'CSS.css': '/* Structure */\ntable {\n  width: 100%;\n}\n\n.mat-mdc-form-field {\n  font-size: 14px;\n  width: 100%;\n}'}, 'Table with expandable rows': {'HTML.html': '<table mat-table\n       [dataSource]="dataSource" multiTemplateDataRows\n       class="mat-elevation-z8">\n  @for (column of columnsToDisplay; track column) {\n    <ng-container matColumnDef="{{column}}">\n      <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n      <td mat-cell *matCellDef="let element"> {{element[column]}} </td>\n    </ng-container>\n  }\n  <ng-container matColumnDef="expand">\n    <th mat-header-cell *matHeaderCellDef aria-label="row actions">&nbsp;</th>\n    <td mat-cell *matCellDef="let element">\n      <button mat-icon-button aria-label="expand row" (click)="(expandedElement = expandedElement === element ? null : element); $event.stopPropagation()">\n        @if (expandedElement === element) {\n          <mat-icon>keyboard_arrow_up</mat-icon>\n        } @else {\n          <mat-icon>keyboard_arrow_down</mat-icon>\n        }\n      </button>\n    </td>\n  </ng-container>\n\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n  <ng-container matColumnDef="expandedDetail">\n    <td mat-cell *matCellDef="let element" [attr.colspan]="columnsToDisplayWithExpand.length">\n      <div class="example-element-detail"\n           [@detailExpand]="element == expandedElement ? \'expanded\' : \'collapsed\'">\n        <div class="example-element-diagram">\n          <div class="example-element-position"> {{element.position}} </div>\n          <div class="example-element-symbol"> {{element.symbol}} </div>\n          <div class="example-element-name"> {{element.name}} </div>\n          <div class="example-element-weight"> {{element.weight}} </div>\n        </div>\n        <div class="example-element-description">\n          {{element.description}}\n          <span class="example-element-description-attribution"> -- Wikipedia </span>\n        </div>\n      </div>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="columnsToDisplayWithExpand"></tr>\n  <tr mat-row *matRowDef="let element; columns: columnsToDisplayWithExpand;"\n      class="example-element-row"\n      [class.example-expanded-row]="expandedElement === element"\n      (click)="expandedElement = expandedElement === element ? null : element">\n  </tr>\n  <tr mat-row *matRowDef="let row; columns: [\'expandedDetail\']" class="example-detail-row"></tr>\n</table>', 'TS.ts': "import {Component} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTableModule} from '@angular/material/table';\n\n/**\n * @title Table with expandable rows\n */\n@Component({\n  selector: 'table-expandable-rows-example',\n  styleUrl: 'table-expandable-rows-example.css',\n  templateUrl: 'table-expandable-rows-example.html',\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed,void', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n  standalone: true,\n  imports: [MatTableModule, MatButtonModule, MatIconModule],\n})\nexport class TableExpandableRowsExample {\n  dataSource = ELEMENT_DATA;\n  columnsToDisplay = ['name', 'weight', 'symbol', 'position'];\n  columnsToDisplayWithExpand = [...this.columnsToDisplay, 'expand'];\n  expandedElement: PeriodicElement | null;\n}\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n  description: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    position: 1,\n    name: 'Hydrogen',\n    weight: 1.0079,\n    symbol: 'H',\n    description: `Hydrogen is a chemical element with symbol H and atomic number 1. With a standard\n        atomic weight of 1.008, hydrogen is the lightest element on the periodic table.`,\n  },\n  {\n    position: 2,\n    name: 'Helium',\n    weight: 4.0026,\n    symbol: 'He',\n    description: `Helium is a chemical element with symbol He and atomic number 2. It is a\n        colorless, odorless, tasteless, non-toxic, inert, monatomic gas, the first in the noble gas\n        group in the periodic table. Its boiling point is the lowest among all the elements.`,\n  },\n  {\n    position: 3,\n    name: 'Lithium',\n    weight: 6.941,\n    symbol: 'Li',\n    description: `Lithium is a chemical element with symbol Li and atomic number 3. It is a soft,\n        silvery-white alkali metal. Under standard conditions, it is the lightest metal and the\n        lightest solid element.`,\n  },\n  {\n    position: 4,\n    name: 'Beryllium',\n    weight: 9.0122,\n    symbol: 'Be',\n    description: `Beryllium is a chemical element with symbol Be and atomic number 4. It is a\n        relatively rare element in the universe, usually occurring as a product of the spallation of\n        larger atomic nuclei that have collided with cosmic rays.`,\n  },\n  {\n    position: 5,\n    name: 'Boron',\n    weight: 10.811,\n    symbol: 'B',\n    description: `Boron is a chemical element with symbol B and atomic number 5. Produced entirely\n        by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a\n        low-abundance element in the Solar system and in the Earth's crust.`,\n  },\n  {\n    position: 6,\n    name: 'Carbon',\n    weight: 12.0107,\n    symbol: 'C',\n    description: `Carbon is a chemical element with symbol C and atomic number 6. It is nonmetallic\n        and tetravalent—making four electrons available to form covalent chemical bonds. It belongs\n        to group 14 of the periodic table.`,\n  },\n  {\n    position: 7,\n    name: 'Nitrogen',\n    weight: 14.0067,\n    symbol: 'N',\n    description: `Nitrogen is a chemical element with symbol N and atomic number 7. It was first\n        discovered and isolated by Scottish physician Daniel Rutherford in 1772.`,\n  },\n  {\n    position: 8,\n    name: 'Oxygen',\n    weight: 15.9994,\n    symbol: 'O',\n    description: `Oxygen is a chemical element with symbol O and atomic number 8. It is a member of\n         the chalcogen group on the periodic table, a highly reactive nonmetal, and an oxidizing\n         agent that readily forms oxides with most elements as well as with other compounds.`,\n  },\n  {\n    position: 9,\n    name: 'Fluorine',\n    weight: 18.9984,\n    symbol: 'F',\n    description: `Fluorine is a chemical element with symbol F and atomic number 9. It is the\n        lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard\n        conditions.`,\n  },\n  {\n    position: 10,\n    name: 'Neon',\n    weight: 20.1797,\n    symbol: 'Ne',\n    description: `Neon is a chemical element with symbol Ne and atomic number 10. It is a noble gas.\n        Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about\n        two-thirds the density of air.`,\n  },\n];", 'CSS.css': 'table {\n  width: 100%;\n}\n\ntr.example-detail-row {\n  height: 0;\n}\n\ntr.example-element-row:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\n\ntr.example-element-row:not(.example-expanded-row):active {\n  background: #efefef;\n}\n\n.example-element-row td {\n  border-bottom-width: 0;\n}\n\n.example-element-detail {\n  overflow: hidden;\n  display: flex;\n}\n\n.example-element-diagram {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n\n.example-element-symbol {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n\n.example-element-description {\n  padding: 16px;\n}\n\n.example-element-description-attribution {\n  opacity: 0.5;\n}'}, 'Basic use of table mat-table': {'HTML.html': '<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n  <!--- Note that these columns can be defined in any order.\n        The actual rendered columns are set as a property on the row definition" -->\n\n  <!-- Position Column -->\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  <!-- Name Column -->\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  <!-- Weight Column -->\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  <!-- Symbol Column -->\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatTableModule} from '@angular/material/table';\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n];\n\n/**\n * @title Basic use of `<table mat-table>`\n */\n@Component({\n  selector: 'table-basic-example',\n  styleUrl: 'table-basic-example.css',\n  templateUrl: 'table-basic-example.html',\n  standalone: true,\n  imports: [MatTableModule],\n})\nexport class TableBasicExample {\n  displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\n  dataSource = ELEMENT_DATA;\n}", 'CSS.css': 'table {\n  width: 100%;\n}'}}, 'list': {'Basic list': {'HTML.html': '<mat-list role="list">\n  <mat-list-item role="listitem">Item 1</mat-list-item>\n  <mat-list-item role="listitem">Item 2</mat-list-item>\n  <mat-list-item role="listitem">Item 3</mat-list-item>\n</mat-list>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatListModule} from '@angular/material/list';\n\n/**\n * @title Basic list\n */\n@Component({\n  selector: 'list-overview-example',\n  templateUrl: 'list-overview-example.html',\n  standalone: true,\n  imports: [MatListModule],\n})\nexport class ListOverviewExample {}"}, 'List with single selection': {'HTML.html': '<mat-selection-list #shoes [multiple]="false">\n  @for (shoe of typesOfShoes; track shoe) {\n    <mat-list-option [value]="shoe">{{shoe}}</mat-list-option>\n  }\n</mat-selection-list>\n\n<p>\n  Option selected: {{shoes.selectedOptions.hasValue() ? shoes.selectedOptions.selected[0].value : \'None\'}}\n</p>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatListModule} from '@angular/material/list';\n\n/**\n * @title List with single selection\n */\n@Component({\n  selector: 'list-single-selection-example',\n  templateUrl: 'list-single-selection-example.html',\n  standalone: true,\n  imports: [MatListModule],\n})\nexport class ListSingleSelectionExample {\n  typesOfShoes: string[] = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\n}"}}, 'divider': {'Basic divider': {'HTML.html': '<mat-list>\n  <mat-list-item>Item 1</mat-list-item>\n  <mat-divider></mat-divider>\n  <mat-list-item>Item 2</mat-list-item>\n  <mat-divider></mat-divider>\n  <mat-list-item>Item 3</mat-list-item>\n</mat-list>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatListModule} from '@angular/material/list';\n\n/**\n * @title Basic divider\n */\n@Component({\n  selector: 'divider-overview-example',\n  templateUrl: 'divider-overview-example.html',\n  standalone: true,\n  imports: [MatListModule, MatDividerModule],\n})\nexport class DividerOverviewExample {}"}}, 'menu': {'Menu positioning': {'HTML.html': '<button mat-button [matMenuTriggerFor]="aboveMenu">Above</button>\n<mat-menu #aboveMenu="matMenu" yPosition="above">\n  <button mat-menu-item>Item 1</button>\n  <button mat-menu-item>Item 2</button>\n</mat-menu>\n\n<button mat-button [matMenuTriggerFor]="belowMenu">Below</button>\n<mat-menu #belowMenu="matMenu" yPosition="below">\n  <button mat-menu-item>Item 1</button>\n  <button mat-menu-item>Item 2</button>\n</mat-menu>\n\n<button mat-button [matMenuTriggerFor]="beforeMenu">Before</button>\n<mat-menu #beforeMenu="matMenu" xPosition="before">\n  <button mat-menu-item>Item 1</button>\n  <button mat-menu-item>Item 2</button>\n</mat-menu>\n\n\n<button mat-button [matMenuTriggerFor]="afterMenu">After</button>\n<mat-menu #afterMenu="matMenu" xPosition="after">\n  <button mat-menu-item>Item 1</button>\n  <button mat-menu-item>Item 2</button>\n</mat-menu>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * @title Menu positioning\n */\n@Component({\n  selector: 'menu-position-example',\n  templateUrl: 'menu-position-example.html',\n  standalone: true,\n  imports: [MatButtonModule, MatMenuModule],\n})\nexport class MenuPositionExample {}"}, 'Menu with icons': {'HTML.html': '<button mat-icon-button [matMenuTriggerFor]="menu" aria-label="Example icon-button with a menu">\n  <mat-icon>more_vert</mat-icon>\n</button>\n<mat-menu #menu="matMenu">\n  <button mat-menu-item>\n    <mat-icon>dialpad</mat-icon>\n    <span>Redial</span>\n  </button>\n  <button mat-menu-item disabled>\n    <mat-icon>voicemail</mat-icon>\n    <span>Check voice mail</span>\n  </button>\n  <button mat-menu-item>\n    <mat-icon>notifications_off</mat-icon>\n    <span>Disable alerts</span>\n  </button>\n</mat-menu>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * @title Menu with icons\n */\n@Component({\n  selector: 'menu-icons-example',\n  templateUrl: 'menu-icons-example.html',\n  standalone: true,\n  imports: [MatButtonModule, MatMenuModule, MatIconModule],\n})\nexport class MenuIconsExample {}"}}, 'select': {'Select in a reactive form': {'HTML.html': '<form [formGroup]="form">\n  <h4>mat-select</h4>\n  <mat-form-field>\n    <mat-label>Favorite Food</mat-label>\n    <mat-select [formControl]="foodControl" name="food">\n      <mat-option>None</mat-option>\n      @for (food of foods; track food) {\n        <mat-option [value]="food.value">{{food.viewValue}}</mat-option>\n      }\n    </mat-select>\n  </mat-form-field>\n  <p>Selected: {{foodControl.value}}</p>\n  <h4>Native select</h4>\n  <mat-form-field>\n    <mat-label>Favorite Car</mat-label>\n    <select matNativeControl [formControl]="carControl" name="car">\n      <option value="">None</option>\n      @for (car of cars; track car) {\n        <option [value]="car.value">{{car.viewValue}}</option>\n      }\n    </select>\n  </mat-form-field>\n  <p>Selected: {{carControl.value}}</p>\n</form>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormControl, FormGroup, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\ninterface Food {\n  value: string;\n  viewValue: string;\n}\n\ninterface Car {\n  value: string;\n  viewValue: string;\n}\n\n/**\n * @title Select in a reactive form\n */\n@Component({\n  selector: 'select-reactive-form-example',\n  templateUrl: 'select-reactive-form-example.html',\n  standalone: true,\n  imports: [FormsModule, ReactiveFormsModule, MatFormFieldModule, MatSelectModule, MatInputModule],\n})\nexport class SelectReactiveFormExample {\n  foods: Food[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ];\n  cars: Car[] = [\n    {value: 'volvo', viewValue: 'Volvo'},\n    {value: 'saab', viewValue: 'Saab'},\n    {value: 'mercedes', viewValue: 'Mercedes'},\n  ];\n  foodControl = new FormControl(this.foods[2].value);\n  carControl = new FormControl(this.cars[1].value);\n  form = new FormGroup({\n    food: this.foodControl,\n    car: this.carControl,\n  });\n}"}, 'Basic select': {'HTML.html': '<h4>Basic mat-select</h4>\n<mat-form-field>\n  <mat-label>Favorite food</mat-label>\n  <mat-select>\n    @for (food of foods; track food) {\n      <mat-option [value]="food.value">{{food.viewValue}}</mat-option>\n    }\n  </mat-select>\n</mat-form-field>\n\n<h4>Basic native select</h4>\n<mat-form-field>\n  <mat-label>Cars</mat-label>\n  <select matNativeControl required>\n    <option value="volvo">Volvo</option>\n    <option value="saab">Saab</option>\n    <option value="mercedes">Mercedes</option>\n    <option value="audi">Audi</option>\n  </select>\n</mat-form-field>', 'TS.ts': "import {Component} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\ninterface Food {\n  value: string;\n  viewValue: string;\n}\n\n/**\n * @title Basic select\n */\n@Component({\n  selector: 'select-overview-example',\n  templateUrl: 'select-overview-example.html',\n  standalone: true,\n  imports: [MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule],\n})\nexport class SelectOverviewExample {\n  foods: Food[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ];\n}"}, 'Select in a form': {'HTML.html': '<form>\n  <h4>mat-select</h4>\n  <mat-form-field>\n    <mat-label>Favorite food</mat-label>\n    <mat-select [(ngModel)]="selectedValue" name="food">\n      @for (food of foods; track food) {\n        <mat-option [value]="food.value">{{food.viewValue}}</mat-option>\n      }\n    </mat-select>\n  </mat-form-field>\n  <p> Selected food: {{selectedValue}} </p>\n  <h4>native html select</h4>\n  <mat-form-field>\n    <mat-label>Favorite car</mat-label>\n    <select matNativeControl [(ngModel)]="selectedCar" name="car">\n      <option value="" selected></option>\n      @for (car of cars; track car) {\n        <option [value]="car.value">{{car.viewValue}}</option>\n      }\n    </select>\n  </mat-form-field>\n  <p> Selected car: {{selectedCar}} </p>\n</form>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule} from '@angular/forms';\n\ninterface Food {\n  value: string;\n  viewValue: string;\n}\n\ninterface Car {\n  value: string;\n  viewValue: string;\n}\n\n/**\n * @title Select in a form\n */\n@Component({\n  selector: 'select-form-example',\n  templateUrl: 'select-form-example.html',\n  standalone: true,\n  imports: [FormsModule, MatFormFieldModule, MatSelectModule, MatInputModule],\n})\nexport class SelectFormExample {\n  selectedValue: string;\n  selectedCar: string;\n\n  foods: Food[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ];\n\n  cars: Car[] = [\n    {value: 'volvo', viewValue: 'Volvo'},\n    {value: 'saab', viewValue: 'Saab'},\n    {value: 'mercedes', viewValue: 'Mercedes'},\n  ];\n}"}}, 'icon': {'Basic icons': {'HTML.html': '<mat-icon aria-hidden="false" aria-label="Example home icon" fontIcon="home"></mat-icon>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\n\n/**\n * @title Basic icons\n */\n@Component({\n  selector: 'icon-overview-example',\n  templateUrl: 'icon-overview-example.html',\n  standalone: true,\n  imports: [MatIconModule],\n})\nexport class IconOverviewExample {}"}}, 'snack-bar': {'Basic snack-bar': {'HTML.html': '<mat-form-field>\n  <mat-label>Message</mat-label>\n  <input matInput value="Disco party!" #message>\n</mat-form-field>\n\n<mat-form-field>\n  <mat-label>Action</mat-label>\n  <input matInput value="Dance" #action>\n</mat-form-field>\n\n<button mat-stroked-button (click)="openSnackBar(message.value, action.value)">Show snack-bar</button>', 'TS.ts': "import {Component} from '@angular/core';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n/**\n * @title Basic snack-bar\n */\n@Component({\n  selector: 'snack-bar-overview-example',\n  templateUrl: 'snack-bar-overview-example.html',\n  styleUrl: 'snack-bar-overview-example.css',\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, MatButtonModule],\n})\nexport class SnackBarOverviewExample {\n  constructor(private _snackBar: MatSnackBar) {}\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action);\n  }\n}", 'CSS.css': 'mat-form-field {\n  margin-right: 12px;\n}'}}}}